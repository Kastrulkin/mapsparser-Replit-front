import { useEffect, useState } from "react";
import Footer from "@/components/Footer";
import { Button } from "@/components/ui/button";
import { newAuth } from "@/lib/auth_new";
import InviteFriendForm from "@/components/InviteFriendForm";
import ServiceOptimizer from "@/components/ServiceOptimizer";
import ReviewReplyAssistant from "@/components/ReviewReplyAssistant";
import NewsGenerator from "@/components/NewsGenerator";
import FinancialMetrics from "@/components/FinancialMetrics";
import ProgressTracker from "@/components/ProgressTracker";
import ROICalculator from "@/components/ROICalculator";
import TransactionForm from "@/components/TransactionForm";
import { BusinessSwitcher } from "@/components/BusinessSwitcher";
import { Select, SelectTrigger, SelectContent, SelectItem, SelectValue } from "@/components/ui/select";

function getNextReportDate(reports: any[]) {
  if (!reports.length) return null;
  const completedReports = reports.filter(report => report.has_report);
  if (!completedReports.length) return null;
  const last = new Date(completedReports[0].created_at);
  return new Date(last.getTime() + 7 * 24 * 60 * 60 * 1000);
}

function getCountdownString(date: Date) {
  const now = new Date();
  const diff = date.getTime() - now.getTime();
  if (diff <= 0) return null;
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
  const minutes = Math.floor((diff / (1000 * 60)) % 60);
  return `${days} –¥. ${hours} —á. ${minutes} –º–∏–Ω.`;
}

const Dashboard = () => {
  const [user, setUser] = useState<any>(null);
  const [reports, setReports] = useState<any[]>([]);
  const [queue, setQueue] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [editMode, setEditMode] = useState(false);
  const [autoAnalysisUrl, setAutoAnalysisUrl] = useState('');
  const [autoAnalysisLoading, setAutoAnalysisLoading] = useState(false);
  const [form, setForm] = useState({ email: "", phone: "", name: "", yandexUrl: "" });
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [inviteSuccess, setInviteSuccess] = useState(false);
  const [timer, setTimer] = useState<string | null>(null);
  
  // –í–∫–ª–∞–¥–∫–∏
  const [activeTab, setActiveTab] = useState<'overview' | 'finance' | 'progress'>('overview');
  
  // –£—Å–ª—É–≥–∏
  const [userServices, setUserServices] = useState<any[]>([]);
  
  // –ë–∏–∑–Ω–µ—Å—ã (–¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)
  const [businesses, setBusinesses] = useState<any[]>([]);
  const [currentBusinessId, setCurrentBusinessId] = useState<string | null>(null);
  const [currentBusiness, setCurrentBusiness] = useState<any>(null);
  const [loadingServices, setLoadingServices] = useState(false);
  const [editingService, setEditingService] = useState<string | null>(null);
  const [showAddService, setShowAddService] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞
  const handleBusinessChange = async (businessId: string) => {
    const business = businesses.find(b => b.id === businessId);
    if (business) {
      setCurrentBusinessId(businessId);
      setCurrentBusiness(business);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
      localStorage.setItem('selectedBusinessId', businessId);
      
      // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞
      // –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è (email, phone, name) –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
      setClientInfo({
        businessName: business.name || "",
        businessType: business.business_type || "beauty_salon",
        address: business.address || "",
        workingHours: business.working_hours || ""
      });
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞
      try {
        const token = newAuth.getToken();
        if (!token) return;
        
        const response = await fetch(`/api/business/${businessId}/data`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥–∏
          setUserServices(data.services || []);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
          setClientInfo({
            businessName: data.business.name || '',
            businessType: data.business.business_type || '',
            address: data.business.address || '',
            workingHours: data.business.working_hours || ''
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –±–∏–∑–Ω–µ—Å–∞
          if (data.business_profile) {
            setForm({
              email: data.business_profile.contact_email || user?.email || "",
              phone: data.business_profile.contact_phone || user?.phone || "",
              name: data.business_profile.contact_name || user?.name || "",
              yandexUrl: ""
            });
          }
          
          console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –±–∏–∑–Ω–µ—Å: ${business.name}`);
          console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ª—É–≥: ${data.services?.length || 0}`);
          console.log(`üìä –î–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å–∞:`, data.business);
        } else {
          const errorData = await response.json();
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–∞:', errorData);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å–∞:', error);
      }
    }
  };
  const [newService, setNewService] = useState({
    category: '',
    name: '',
    description: '',
    keywords: '',
    price: ''
  });
  
  // –§–∏–Ω–∞–Ω—Å—ã
  const [showTransactionForm, setShowTransactionForm] = useState(false);
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
  const [clientInfo, setClientInfo] = useState({
    businessName: '',
    businessType: '',
    address: '',
    workingHours: ''
  });
  const [editClientInfo, setEditClientInfo] = useState(false);
  const [savingClientInfo, setSavingClientInfo] = useState(false);

  // –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
  const profileCompletion = (() => {
    const fieldsTotal = 7; // email, phone, name, businessName, businessType, address, workingHours
    let filled = 0;
    if ((form.email || '').trim()) filled++;
    if ((form.phone || '').trim()) filled++;
    if ((form.name || '').trim()) filled++;
    if ((clientInfo.businessName || '').trim()) filled++;
    if ((clientInfo.businessType || '').trim()) filled++;
    if ((clientInfo.address || '').trim()) filled++;
    if ((clientInfo.workingHours || '').trim()) filled++;
    return Math.round((filled / fieldsTotal) * 100);
  })();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserServices = async () => {
    setLoadingServices(true);
    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${window.location.origin}/api/services/list`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const data = await response.json();
      if (data.success) {
        setUserServices(data.services || []);
      }
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', e);
    } finally {
      setLoadingServices(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
  const addService = async () => {
    if (!newService.name.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${window.location.origin}/api/services/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          category: newService.category || '–û–±—â–∏–µ —É—Å–ª—É–≥–∏',
          name: newService.name,
          description: newService.description,
          keywords: newService.keywords.split(',').map(k => k.trim()).filter(k => k),
          price: newService.price,
          business_id: currentBusinessId
        })
      });

      const data = await response.json();
      if (data.success) {
        setNewService({ category: '', name: '', description: '', keywords: '', price: '' });
        setShowAddService(false);
        await loadUserServices();
        setSuccess('–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
      }
    } catch (e: any) {
      setError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + e.message);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
  const updateService = async (serviceId: string, updatedData: any) => {
    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${window.location.origin}/api/services/update/${serviceId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(updatedData)
      });

      const data = await response.json();
      if (data.success) {
        setEditingService(null);
        await loadUserServices();
        setSuccess('–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
      }
    } catch (e: any) {
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + e.message);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
  const deleteService = async (serviceId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?')) return;

    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${window.location.origin}/api/services/delete/${serviceId}`, {
        method: 'DELETE',
        headers: { 'Authorization': `Bearer ${token}` }
      });

      const data = await response.json();
      if (data.success) {
        await loadUserServices();
        setSuccess('–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞');
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
      }
    } catch (e: any) {
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + e.message);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
  const handleSaveClientInfo = async () => {
    setSavingClientInfo(true);
    try {
      const response = await fetch(`${window.location.origin}/api/client-info`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          ...clientInfo,
          businessId: currentBusinessId
        })
      });

      if (response.ok) {
        setEditClientInfo(false);
        setSuccess('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
        if (currentBusinessId) {
          const updatedBusinesses = businesses.map(b => 
            b.id === currentBusinessId 
              ? { ...b, name: clientInfo.businessName, address: clientInfo.address, working_hours: clientInfo.workingHours }
              : b
          );
          setBusinesses(updatedBusinesses);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å
          const updatedCurrentBusiness = updatedBusinesses.find(b => b.id === currentBusinessId);
          if (updatedCurrentBusiness) {
            setCurrentBusiness(updatedCurrentBusiness);
          }
        }
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    } finally {
      setSavingClientInfo(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const handleUpdateProfile = async () => {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å –±–∏–∑–Ω–µ—Å–∞
      if (currentBusinessId) {
        const response = await fetch(`${window.location.origin}/api/business/${currentBusinessId}/profile`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
          },
          body: JSON.stringify({
            contact_name: form.name,
            contact_phone: form.phone,
            contact_email: form.email
          })
        });

        if (response.ok) {
          setEditMode(false);
          setSuccess('–ü—Ä–æ—Ñ–∏–ª—å –±–∏–∑–Ω–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
          const errorData = await response.json();
          setError(errorData.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–∏–∑–Ω–µ—Å–∞');
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const { user: updatedUser, error } = await newAuth.updateProfile({
          name: form.name,
          phone: form.phone
        });

        if (error) {
          setError(error);
          return;
        }

        setUser(updatedUser);
        setEditMode(false);
        setSuccess('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      setError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const [showCreateReport, setShowCreateReport] = useState(false);
  const [creatingReport, setCreatingReport] = useState(false);
  const [createReportForm, setCreateReportForm] = useState({ yandexUrl: "" });

  const handleCreateReport = async () => {
    if (!createReportForm.yandexUrl.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç');
      return;
    }

    setCreatingReport(true);
    setError(null);

    try {
      const response = await fetch(`${window.location.origin}/api/create-report`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: JSON.stringify({
          yandex_url: createReportForm.yandexUrl
        })
      });

      if (response.ok) {
        setSuccess('–û—Ç—á—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        setShowCreateReport(false);
        setCreateReportForm({ yandexUrl: "" });
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤
        window.location.reload();
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
    } finally {
      setCreatingReport(false);
    }
  };

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
  const [viewingReport, setViewingReport] = useState<string | null>(null);
  const [reportContent, setReportContent] = useState('');
  const [loadingReport, setLoadingReport] = useState(false);

  const handleViewReport = async (reportId: string) => {
    setViewingReport(reportId);
    setLoadingReport(true);
    setReportContent('');

    try {
      const response = await fetch(`${window.location.origin}/api/reports/${reportId}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        setReportContent(data.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á—ë—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞');
    } finally {
      setLoadingReport(false);
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
  const handleDownloadReport = async (reportId: string) => {
    try {
      const response = await fetch(`${window.location.origin}/api/reports/${reportId}/download`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        }
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `report-${reportId}.pdf`;
        a.click();
        window.URL.revokeObjectURL(url);
        setSuccess('–û—Ç—á—ë—Ç —Å–∫–∞—á–∞–Ω');
      } else {
        setError('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
  const handleAutoAnalysis = async () => {
    if (!autoAnalysisUrl.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ URL –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö');
      return;
    }

    if (!autoAnalysisUrl.includes('yandex.ru/maps')) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã');
      return;
    }

    setAutoAnalysisLoading(true);
    setError(null);

    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch('http://localhost:8000/api/analyze-card-auto', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ url: autoAnalysisUrl })
      });

      const data = await response.json();

      if (data.success) {
        setSuccess('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
        setAutoAnalysisUrl('');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
        window.location.reload();
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setAutoAnalysisLoading(false);
    }
  };
  const [canCreateReport, setCanCreateReport] = useState<boolean>(false);
  const [paraphrasingService, setParaphrasingService] = useState("");
  const [paraphrasedText, setParaphrasedText] = useState("");
  const [paraphrasing, setParaphrasing] = useState(false);
  const [cardImage, setCardImage] = useState<File | null>(null);
  const [analyzingCard, setAnalyzingCard] = useState(false);
  const [cardAnalysis, setCardAnalysis] = useState<any>(null);
  const [priceListFile, setPriceListFile] = useState<File | null>(null);
  const [optimizingPriceList, setOptimizingPriceList] = useState(false);
  const [priceListOptimization, setPriceListOptimization] = useState<any>(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await newAuth.getCurrentUser();
        console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
        
        if (!currentUser) {
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
          setLoading(false);
          return;
        }

        setUser(currentUser);
        setForm({
          email: currentUser.email || "",
          phone: currentUser.phone || "",
          name: currentUser.name || "",
          yandexUrl: ""
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–∑–Ω–µ—Å—ã –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
        if (currentUser.is_superadmin && currentUser.businesses) {
          setBusinesses(currentUser.businesses);
          if (currentUser.businesses.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –≤ localStorage
            const savedBusinessId = localStorage.getItem('selectedBusinessId');
            const businessToSelect = savedBusinessId 
              ? currentUser.businesses.find(b => b.id === savedBusinessId) || currentUser.businesses[0]
              : currentUser.businesses[0];
            
            setCurrentBusinessId(businessToSelect.id);
            setCurrentBusiness(businessToSelect);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
            localStorage.setItem('selectedBusinessId', businessToSelect.id);
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { reports: userReports, error: reportsError } = await newAuth.getUserReports();
        if (reportsError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤:', reportsError);
        } else {
          console.log('–û—Ç—á—ë—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', userReports);
          setReports(userReports || []);
        }

        // –ü–æ–ª—É—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { queue: userQueue, error: queueError } = await newAuth.getUserQueue();
        if (queueError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', queueError);
        } else {
          console.log('–û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', userQueue);
          setQueue(userQueue || []);
        }

        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
        setCreateReportForm({
          yandexUrl: ""
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadUserServices();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
        try {
          const clientInfoResponse = await fetch(`${window.location.origin}/api/client-info`, {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
            }
          });
          if (clientInfoResponse.ok) {
            const clientData = await clientInfoResponse.json();
            setClientInfo(clientData);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ:', error);
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  useEffect(() => {
    // –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ ‚Äî –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ä–∞–∑—É
    const nextDate = getNextReportDate(reports);
    if (!nextDate) {
    setCanCreateReport(true);
      setTimer('00:00:00');
      return;
    }

    const now = new Date();
    if (nextDate.getTime() <= now.getTime()) {
      setCanCreateReport(true);
      setTimer('00:00:00');
      return;
    }

    setCanCreateReport(false);
    const updateTimer = () => {
      const countdown = getCountdownString(nextDate);
      setTimer(countdown);
      if (!countdown) {
        // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          window.location.reload();
      }
    };
    updateTimer();
    const interval = setInterval(updateTimer, 60000);
    return () => clearInterval(interval);
  }, [reports]);


  const handleDeleteQueueItem = async (queueId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏?')) {
      return;
    }

    try {
      const response = await fetch(`https://beautybot.pro/api/users/queue/${queueId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        setSuccess('–û—Ç—á—ë—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞');
    }
  };


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat
  const handleParaphraseService = async () => {
    if (!paraphrasingService.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    setParaphrasing(true);
    setError(null);

    try {
        const response = await fetch('http://localhost:5002/api/paraphrase', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: paraphrasingService,
          businessType: clientInfo.businessType
        })
      });

      if (response.ok) {
        const data = await response.json();
        setParaphrasedText(data.paraphrased_text);
        setSuccess('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setParaphrasing(false);
    }
  };

  const handleAnalyzeCard = async () => {
    if (!cardImage) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    setAnalyzingCard(true);
    setError(null);
    
    try {
      const formData = new FormData();
      formData.append('image', cardImage);
      
      const response = await fetch('http://localhost:5002/api/analyze-card', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: formData
      });
      
      if (response.ok) {
        const data = await response.json();
        setCardAnalysis(data);
        setSuccess('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
      setError('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏');
    } finally {
      setAnalyzingCard(false);
    }
  };

  const handleOptimizePriceList = async () => {
    if (!priceListFile) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
      return;
    }
    
    setOptimizingPriceList(true);
    setError(null);
    
    try {
      const formData = new FormData();
      formData.append('file', priceListFile);
      
      const response = await fetch('http://localhost:5002/api/optimize-pricelist', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
        },
        body: formData
      });
      
      if (response.ok) {
        const data = await response.json();
        setPriceListOptimization(data);
        setSuccess('–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω');
      } else {
        const errorData = await response.json();
        setError(errorData.error || '–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:', error);
      setError('–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞');
    } finally {
      setOptimizingPriceList(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h1>
          <p className="text-gray-600 mb-6">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</p>
          <Button onClick={() => window.location.href = '/login'}>
            –í–æ–π—Ç–∏
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="mb-2 flex items-center justify-between">
            <h1 className="text-3xl font-bold text-gray-900">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
            <div className="flex items-center space-x-4">
              {user?.is_superadmin && (
                <div className="text-sm text-gray-600">
                  –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}
                </div>
              )}
              {user?.is_superadmin && businesses.length > 0 && (
                <BusinessSwitcher
                  businesses={businesses}
                  currentBusinessId={currentBusinessId}
                  onBusinessChange={handleBusinessChange}
                  isSuperadmin={user.is_superadmin}
                />
              )}
              <Button variant="outline" size="sm" onClick={() => newAuth.signOut()}>–í—ã–π—Ç–∏</Button>
            </div>
          </div>
          {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–ª–æ–∫ + —à–∫–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ */}
          <div className="mb-6 bg-white rounded-lg border border-gray-200 p-4">
            <p className="text-gray-800 mb-2">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <span className="font-semibold">BeautyBot.pro</span>!</p>
            {currentBusiness && (
              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-800">
                  <span className="font-medium">–¢–µ–∫—É—â–∏–π –±–∏–∑–Ω–µ—Å:</span> {currentBusiness.name}
                  {currentBusiness.description && (
                    <span className="block text-xs text-blue-600 mt-1">{currentBusiness.description}</span>
                  )}
                </p>
              </div>
            )}
            <p className="text-gray-600 text-sm">
              –≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–æ–º —Å–∞–ª–æ–Ω–∞.
            </p>
            <p className="text-gray-600 text-sm mt-2">
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ –∏ –±–∏–∑–Ω–µ—Å–µ ‚Äî —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥. –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
            </p>
            <p className="text-gray-600 text-sm mt-2">üí° –ü–æ–º–Ω–∏—Ç–µ: –≤—ã –ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî 7% –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.</p>

            <div className="mt-4">
              <div className="flex items-center justify-between mb-1">
                <span className="text-sm text-gray-700">–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</span>
                <span className="text-sm font-medium text-orange-600">{profileCompletion}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded h-3 overflow-hidden">
                <div className={`h-3 rounded ${profileCompletion>=80 ? 'bg-green-500' : profileCompletion>=50 ? 'bg-yellow-500' : 'bg-orange-500'}`} style={{ width: `${profileCompletion}%` }} />
              </div>
            </div>
          </div>

          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded mb-4">
              {error}
        </div>
          )}

          {success && (
            <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mb-4">
              {success}
            </div>
          )}

          {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className="mb-8 bg-white rounded-lg border border-gray-200 p-4">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-900">–ü—Ä–æ—Ñ–∏–ª—å</h2>
              {!editMode && (
                <Button onClick={() => setEditMode(true)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
              )}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                  <input 
                    type="email" 
                    value={form.email} 
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ò–º—è</label>
                <input 
                  type="text" 
                  value={form.name} 
                  onChange={(e) => setForm({...form, name: e.target.value})}
                  disabled={!editMode}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input 
                  type="tel"
                  value={form.phone}
                  onChange={(e) => setForm({...form, phone: e.target.value})}
                  disabled={!editMode}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
            </div>
            {editMode && (
              <div className="mt-4 flex justify-end">
                <div className="flex gap-2">
                  <Button onClick={handleUpdateProfile}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
                  <Button onClick={() => setEditMode(false)} variant="outline">–û—Ç–º–µ–Ω–∞</Button>
                </div>
              </div>
          )}
                  </div>
                  
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ */}
          <div className="mb-8 bg-white rounded-lg border border-gray-200 p-4">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold text-gray-900">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ</h2>
              {!editClientInfo && (
                <Button onClick={() => setEditClientInfo(true)}>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</Button>
              )}
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞</label>
                        <input 
                  type="text" 
                  value={clientInfo.businessName} 
                  onChange={(e) => setClientInfo({...clientInfo, businessName: e.target.value})}
                  disabled={!editClientInfo}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        />
                      </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞</label>
                {editClientInfo ? (
                  <Select
                    value={clientInfo.businessType || "beauty_salon"}
                    onValueChange={(v) => setClientInfo({ ...clientInfo, businessType: v })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="beauty_salon">–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã</SelectItem>
                      <SelectItem value="barbershop">–ë–∞—Ä–±–µ—Ä—à–æ–ø</SelectItem>
                      <SelectItem value="spa">SPA/Wellness</SelectItem>
                      <SelectItem value="nail_studio">–ù–æ–≥—Ç–µ–≤–∞—è —Å—Ç—É–¥–∏—è</SelectItem>
                      <SelectItem value="cosmetology">–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è</SelectItem>
                      <SelectItem value="massage">–ú–∞—Å—Å–∞–∂</SelectItem>
                      <SelectItem value="brows_lashes">–ë—Ä–æ–≤–∏ –∏ —Ä–µ—Å–Ω–∏—Ü—ã</SelectItem>
                      <SelectItem value="makeup">–ú–∞–∫–∏—è–∂</SelectItem>
                      <SelectItem value="tanning">–°–æ–ª—è—Ä–∏–π</SelectItem>
                      <SelectItem value="other">–î—Ä—É–≥–æ–µ</SelectItem>
                    </SelectContent>
                  </Select>
                ) : (
                  <input
                    type="text"
                    value={clientInfo.businessType}
                    disabled
                    className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
                    readOnly
                  />
                )}
              </div>
                      <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ê–¥—Ä–µ—Å</label>
                        <input 
                  type="text" 
                  value={clientInfo.address} 
                  onChange={(e) => setClientInfo({...clientInfo, address: e.target.value})}
                  disabled={!editClientInfo}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                        />
                      </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</label>
                <input 
                  type="text" 
                  value={clientInfo.workingHours} 
                  onChange={(e) => setClientInfo({...clientInfo, workingHours: e.target.value})}
                  disabled={!editClientInfo}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>
            </div>
            {editClientInfo && (
              <div className="mt-4 flex justify-end">
                <div className="flex gap-2">
                  <Button onClick={handleSaveClientInfo} disabled={savingClientInfo}>
                    {savingClientInfo ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </Button>
                  <Button onClick={() => setEditClientInfo(false)} variant="outline">–û—Ç–º–µ–Ω–∞</Button>
                      </div>
                    </div>
                  )}
                </div>

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º */}
          <div className="mb-6 bg-white rounded-lg border border-gray-200 p-4">
            <div className="flex space-x-1 bg-gray-100 p-1 rounded-lg">
              <button
                onClick={() => setActiveTab('overview')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'overview'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                üìä –û–±–∑–æ—Ä
              </button>
              <button
                onClick={() => setActiveTab('finance')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'finance'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                üí∞ –§–∏–Ω–∞–Ω—Å—ã
              </button>
              <button
                onClick={() => setActiveTab('progress')}
                className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
                  activeTab === 'progress'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å
              </button>
          </div>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
            <div className="mt-6">
          {/* –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          {activeTab === 'finance' && (
                <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-xl font-semibold text-gray-900">üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∞–Ω–µ–ª—å</h2>
                <Button 
                  onClick={() => setShowTransactionForm(!showTransactionForm)}
                  className="bg-green-600 hover:bg-green-700"
                >
                  {showTransactionForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '+ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'}
                </Button>
              </div>

              {showTransactionForm && (
                <TransactionForm 
                  onSuccess={() => {
                    setShowTransactionForm(false);
                    setSuccess('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                  }}
                  onCancel={() => setShowTransactionForm(false)}
                />
              )}

              <FinancialMetrics />
              <ROICalculator />
            </div>
          )}

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-—Ç—Ä–µ–∫–µ—Ä */}
          {activeTab === 'progress' && (
                <div className="space-y-6">
              <h2 className="text-xl font-semibold text-gray-900">üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
              <ProgressTracker />
            </div>
          )}

          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ overview) */}
          {activeTab === 'overview' && (
            <>
                  {/* –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥ (–û–±–∑–æ—Ä) */}
            <div className="mb-8">
                    <div className="flex justify-between items-center mb-4">
                      <div className="flex-1 pr-4">
                        <h2 className="text-xl font-semibold text-gray-900">–£—Å–ª—É–≥–∏</h2>
                        <p className="text-sm text-gray-600 mt-1">
                          üìã –ù–∏–∂–µ –≤ –±–ª–æ–∫–µ "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç" –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –ø—Ä–∞–π—Å-–ª–∏—Å—Ç, –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥ —Ç–∞–∫, —á—Ç–æ–±—ã —á–∞—â–µ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ. 
                          <br/><br/>
                          –≠—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. 
                          <br/><br/>
                          –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –ø–æ—Ç–æ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
                        </p>
                    </div>
                      <Button onClick={() => setShowAddService(true)}>+ –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É</Button>
        </div>

                    {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ */}
                    {showAddService && (
                      <div className="mb-6 bg-gray-50 border border-gray-200 rounded-lg p-4">
                        <h3 className="text-lg font-medium text-gray-900 mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <input 
                  type="text" 
                              value={newService.category}
                              onChange={(e) => setNewService({...newService, category: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∏"
                />
              </div>
              <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                <input 
                  type="text" 
                              value={newService.name}
                              onChange={(e) => setNewService({...newService, name: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞"
                />
              </div>
              <div className="md:col-span-2">
                            <label className="block text-sm font-medium text-gray-700 mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea 
                              value={newService.description}
                              onChange={(e) => setNewService({...newService, description: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  rows={3}
                              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏"
                />
              </div>
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                            <input
                              type="text"
                              value={newService.keywords}
                              onChange={(e) => setNewService({...newService, keywords: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                              placeholder="—Å—Ç—Ä–∏–∂–∫–∞, —É–∫–ª–∞–¥–∫–∞, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ"
                />
              </div>
              <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞</label>
                            <input
                              type="text"
                              value={newService.price}
                              onChange={(e) => setNewService({...newService, price: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 2000 —Ä—É–±"
                />
              </div>
                  </div>
                        <div className="flex gap-2 mt-4">
                          <Button onClick={addService}>–î–æ–±–∞–≤–∏—Ç—å</Button>
                          <Button onClick={() => setShowAddService(false)} variant="outline">–û—Ç–º–µ–Ω–∞</Button>
                </div>
            </div>
                    )}

                    <div className="overflow-x-auto bg-white border border-gray-200 rounded-lg">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–¶–µ–Ω–∞</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {loadingServices ? (
                            <tr>
                              <td className="px-4 py-3 text-gray-500" colSpan={5}>–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</td>
                            </tr>
                          ) : userServices.length === 0 ? (
                            <tr>
                              <td className="px-4 py-3 text-gray-500" colSpan={5}>–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥</td>
                            </tr>
                          ) : (
                            userServices.map((service, index) => (
                              <tr key={service.id || index}>
                                <td className="px-4 py-3 text-sm text-gray-900">{service.category}</td>
                                <td className="px-4 py-3 text-sm font-medium text-gray-900">{service.name}</td>
                                <td className="px-4 py-3 text-sm text-gray-600">{service.description}</td>
                                <td className="px-4 py-3 text-sm text-gray-600">{service.price || '‚Äî'}</td>
                                <td className="px-4 py-3 text-sm">
                                  <div className="flex gap-2">
                  <Button 
                                      size="sm" 
                                      variant="outline" 
                                      onClick={() => setEditingService(service.id)}
                                    >
                                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                    <Button 
                      size="sm"
                                      variant="outline" 
                                      onClick={() => deleteService(service.id)}
                                      className="text-red-600 hover:text-red-700"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                                </td>
                              </tr>
                            ))
                          )}
                        </tbody>
                      </table>
                    </div>
                      </div>
                </>
              )}
                      </div>
                    </div>
                    

          {/* –ë–ª–æ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ª—É–≥ (–ø–æ–¥ –≤—Å–µ–º–∏ –≤–∫–ª–∞–¥–∫–∞–º–∏, –Ω–æ –Ω–∞–¥ –æ—Ç–∑—ã–≤–∞–º–∏) */}
          <div className="mb-12 bg-white rounded-lg border border-gray-200 p-4">
            <ServiceOptimizer businessName={clientInfo.businessName} />
                    </div>
                    
                    
          {/* –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã */}
          <div className="mb-8 bg-white rounded-lg border border-gray-200 p-4">
            <ReviewReplyAssistant businessName={clientInfo.businessName} />
          </div>

          {/* –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–¥ –æ—Ç–∑—ã–≤–∞–º–∏ */}
          <div className="mb-8 bg-white rounded-lg border border-gray-200 p-4">
            <NewsGenerator services={(userServices||[]).map(s=>({ id: s.id, name: s.name }))} />
          </div>

          {/* –ë–ª–æ–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã —Å—é–¥–∞: */}
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç</h2>
            {!showCreateReport ? (
              <Button onClick={() => setShowCreateReport(true)}>
                –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á—ë—Ç
              </Button>
            ) : (
            <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
                  </label>
                  <input
                    type="url"
                    value={createReportForm.yandexUrl}
                    onChange={(e) => setCreateReportForm({ ...createReportForm, yandexUrl: e.target.value })}
                    placeholder="https://yandex.ru/maps/org/..."
                    className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div className="flex gap-2">
                  <Button onClick={handleCreateReport} disabled={creatingReport}>
                    {creatingReport ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç'}
                    </Button>
                  <Button onClick={() => setShowCreateReport(false)} variant="outline">
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                </div>
                      </div>
                    )}
          </div>

          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">–ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã</h2>
            {reports.length === 0 ? (
              <p className="text-gray-600">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤</p>
            ) : (
                        <div className="space-y-4">
                {reports.map((report) => (
                  <div key={report.id} className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <h3 className="font-medium text-gray-900">
                          {report.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                        </h3>
                        <p className="text-sm text-gray-600 mt-1">
                          –°–æ–∑–¥–∞–Ω: {new Date(report.created_at).toLocaleString()}
                        </p>
                        {report.seo_score && (
                          <p className="text-sm text-gray-600">
                            SEO-–æ—Ü–µ–Ω–∫–∞: {report.seo_score}/100
                          </p>
                        )}
                                </div>
                      <div className="flex gap-2 ml-4">
                        {report.has_report && (
                          <>
                            <Button onClick={() => handleViewReport(report.id)} variant="outline" size="sm">
                              –ü—Ä–æ—Å–º–æ—Ç—Ä
                          </Button>
                            <Button onClick={() => handleDownloadReport(report.id)} variant="outline" size="sm">
                              –°–∫–∞—á–∞—Ç—å
                          </Button>
                          </>
                        )}
                        </div>
                      </div>
                  </div>
                ))}
                </div>
              )}
          </div>

          {/* –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è */}
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞</h2>
            <InviteFriendForm
              onSuccess={() => setInviteSuccess(true)}
              onError={(error) => setError(error)}
            />
            {inviteSuccess && (
              <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded mt-4">
                –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
              </div>
            )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–∞ */}
        {viewingReport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-4xl max-h-[90vh] w-full mx-4 overflow-hidden">
            <div className="flex justify-between items-center p-4 border-b">
              <h3 className="text-lg font-semibold">–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–∞</h3>
              <Button onClick={() => setViewingReport(null)} variant="outline">
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </div>
            <div className="p-4 overflow-auto max-h-[calc(90vh-80px)]">
              {loadingReport ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto"></div>
                  <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞...</p>
                </div>
              ) : (
                <div dangerouslySetInnerHTML={{ __html: reportContent }} />
              )}
            </div>
            </div>
          </div>
        )}

      <Footer />
      </div>
    </div>
  );
};

export default Dashboard;
