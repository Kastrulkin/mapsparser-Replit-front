import React, { useState } from 'react';
import { Button } from './ui/button';
import { Textarea } from './ui/textarea';
import { Input } from './ui/input';

type Tone = 'friendly' | 'professional' | 'premium' | 'youth' | 'business';

interface OptimizeResultService {
  original_name: string;
  optimized_name: string;
  seo_description: string;
  keywords: string[];
  price?: string | null;
  category?: string | null;
}

const tonePresets: { key: Tone; label: string; example: string }[] = [
  { key: 'friendly', label: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π', example: "–°–¥–µ–ª–∞–µ–º –≤–∞—Å –Ω–µ–æ—Ç—Ä–∞–∑–∏–º–æ–π! –°—Ç—Ä–∏–∂–∫–∞ + —É–∫–ª–∞–¥–∫–∞ —Ñ–µ–Ω–æ–º" },
  { key: 'professional', label: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', example: "–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞" },
  { key: 'premium', label: '–ü—Ä–µ–º–∏—É–º', example: "–ê–≤—Ç–æ—Ä—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ –æ—Ç —Ç–æ–ø-—Å—Ç–∏–ª–∏—Å—Ç–∞. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥" },
  { key: 'youth', label: '–ú–æ–ª–æ–¥—ë–∂–Ω—ã–π', example: "–ö—Ä—É—Ç—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ –∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ! –°–ª–µ–¥–∏–º –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ 2025" },
  { key: 'business', label: '–î–µ–ª–æ–≤–æ–π', example: "–≠–∫—Å–ø—Ä–µ—Å—Å-—Å—Ç—Ä–∏–∂–∫–∞ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö. –ë–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è" },
];

export default function ServiceOptimizer({ businessName }: { businessName?: string }) {
  const [mode, setMode] = useState<'text' | 'file'>('text');
  const [text, setText] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [tone, setTone] = useState<Tone>('professional');
  const [instructions, setInstructions] = useState('');
  const [region, setRegion] = useState('');
  const [length, setLength] = useState(150);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<OptimizeResultService[] | null>(null);
  const [recs, setRecs] = useState<string[] | null>(null);
  const [addedServices, setAddedServices] = useState<Set<number>>(new Set());

  const callOptimize = async () => {
    setLoading(true);
    setError(null);
    setResult(null);
    try {
      const token = localStorage.getItem('auth_token');
      let response: Response;
      if (mode === 'file') {
        if (!file) {
          setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å–ª—É–≥–∞–º–∏');
          setLoading(false);
          return;
        }
        const formData = new FormData();
        formData.append('file', file);
        formData.append('tone', tone);
        if (instructions) formData.append('instructions', instructions);
        if (region) formData.append('region', region);
        formData.append('description_length', String(length));
        response = await fetch(`${window.location.origin}/api/services/optimize`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` },
          body: (()=>{ formData.append('business_name', businessName || ''); return formData; })(),
        });
      } else {
        response = await fetch(`${window.location.origin}/api/services/optimize`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ text, tone, instructions, region, description_length: length, business_name: businessName || '' })
        });
      }
      const data = await response.json();
      if (!response.ok || data.error) {
        setError(data.error || '–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
      } else {
        setResult(Array.isArray(data.result?.services) ? data.result.services : []);
        setRecs(Array.isArray(data.result?.general_recommendations) ? data.result.general_recommendations : []);
      }
    } catch (e: any) {
      setError(e.message || '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞');
    } finally {
      setLoading(false);
    }
  };

  const exportCSV = () => {
    if (!result) return;
    const header = '–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ,SEO –Ω–∞–∑–≤–∞–Ω–∏–µ,SEO –æ–ø–∏—Å–∞–Ω–∏–µ,–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞,–¶–µ–Ω–∞\n';
    const rows = result.map(s => `${s.original_name || ''},${s.optimized_name || ''},"${(s.seo_description || '').replace(/"/g,'""')}" ,${(s.keywords||[]).join(';')},${s.price||''}`).join('\n');
    const blob = new Blob([header + rows], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'services-optimized.csv'; a.click();
    URL.revokeObjectURL(url);
  };

  const addServiceToList = async (serviceIndex: number) => {
    if (!result) return;
    const service = result[serviceIndex];
    try {
      const token = localStorage.getItem('auth_token');
      const response = await fetch(`${window.location.origin}/api/services/add`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          category: service.category || '–û–±—â–∏–µ —É—Å–ª—É–≥–∏',
          name: service.optimized_name,
          description: service.seo_description,
          keywords: service.keywords,
          price: service.price
        })
      });
      
      if (response.ok) {
        setAddedServices(prev => new Set([...prev, serviceIndex]));
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      } else {
        setError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏');
      }
    } catch (e: any) {
      setError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: ' + e.message);
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 mb-1">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç</h2>
        <p className="text-sm text-gray-600">üîé –ö–∞—Ä—Ç—ã –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ SEO ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂.</p>
        <p className="text-sm text-gray-600 mt-2">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥ –ø–æ–≤—ã—à–∞—é—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ø–æ–∏—Å–∫–µ, –∫–ª–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –≤—ã–¥–∞—á–µ.</p>
        <p className="text-sm text-gray-600 mt-2">–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—É–≥–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å‚Äë–ª–∏—Å—Ç ‚Äî –ò–ò –≤–µ—Ä–Ω—ë—Ç –∫—Ä–∞—Ç–∫–∏–µ SEO‚Äë—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ —Å—Ç—Ä–æ–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å —É—á—ë—Ç–æ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–∞—à–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.</p>
        <p className="text-sm text-gray-600 mt-2">–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.</p>
      </div>

      <div className="flex gap-2">
        <Button variant={mode==='text' ? undefined : 'outline'} onClick={() => setMode('text')}>–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–º</Button>
        <Button variant={mode==='file' ? undefined : 'outline'} onClick={() => setMode('file')}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</Button>
      </div>

      {mode === 'text' ? (
        <Textarea
          value={text}
          onChange={(e) => setText(e.target.value)}
          rows={8}
          placeholder={"–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å, —É–∫–ª–∞–¥–∫–∞, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ...\n\n–°–æ–≤–µ—Ç: –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–Ω –∏ –Ω—é–∞–Ω—Å—ã (–º–∞—Ç–µ—Ä–∏–∞–ª—ã, –£–¢–ü, —Ä–∞–π–æ–Ω/–º–µ—Ç—Ä–æ)."}
        />
      ) : (
        <div>
          <Input type="file" accept=".pdf,.doc,.docx,.xls,.xlsx,.csv,.txt,.png,.jpg,.jpeg" onChange={(e)=> setFile(e.target.files?.[0] || null)} />
          {file && <p className="text-xs text-gray-500 mt-1">–§–∞–π–ª: {file.name}</p>}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm text-gray-600 mb-1">–¢–æ–Ω</label>
          <div className="flex flex-wrap gap-2">
            {tonePresets.map(p => (
              <button key={p.key} type="button" onClick={()=>setTone(p.key)}
                className={`text-xs px-3 py-1 rounded-full border ${tone===p.key ? 'bg-blue-600 text-white border-blue-600' : 'border-gray-300 text-gray-700'}`}>
                {p.label}
              </button>
            ))}
          </div>
          <p className="text-xs text-gray-500 mt-2">–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–Ω–∞ –ø–æ—è–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö.</p>
        </div>
        <div>
          <label className="block text-sm text-gray-600 mb-1">–†–µ–≥–∏–æ–Ω (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ SEO)</label>
          <Input value={region} onChange={(e)=>setRegion(e.target.value)} placeholder="–°–∞–Ω–∫—Ç‚Äë–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –º. –ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è" />
        </div>
        <div>
          <label className="block text-sm text-gray-600 mb-1">–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è (—Å–∏–º–≤–æ–ª–æ–≤)</label>
          <Input type="number" min={80} max={200} value={length} onChange={(e)=> setLength(Number(e.target.value)||150)} />
        </div>
      </div>

      <div>
        <label className="block text-sm text-gray-600 mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
        <Textarea rows={3} value={instructions} onChange={(e)=> setInstructions(e.target.value)} placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ç–æ–ª—å–∫–æ –±–µ–∑–∞–º–º–∏–∞—á–Ω—ã–µ –∫—Ä–∞—Å–∏—Ç–µ–ª–∏; –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –æ–ø—ã—Ç –º–∞—Å—Ç–µ—Ä–æ–≤; —É–∫–∞–∑–∞—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—é; –∏–∑–±–µ–≥–∞—Ç—å —ç–º–æ–¥–∑–∏." />
      </div>

      {error && <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded">{error}</div>}

      <div className="flex gap-2">
        <Button onClick={callOptimize} disabled={loading || (mode==='text' ? text.trim().length===0 : !file)}>
          {loading ? '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º‚Ä¶' : '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
        </Button>
        {result && <Button variant="outline" onClick={exportCSV}>–≠–∫—Å–ø–æ—Ä—Ç CSV</Button>}
      </div>

      {result && (
        <div className="mt-4 space-y-3">
          {recs && recs.length>0 && (
            <div className="bg-blue-50 border border-blue-200 p-3 rounded">
              <div className="text-sm font-medium text-blue-900 mb-1">–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</div>
              <ul className="list-disc list-inside text-sm text-blue-900">
                {recs.map((r, i) => <li key={i}>{r}</li>)}
              </ul>
            </div>
          )}
          <div className="overflow-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr className="text-left text-gray-600">
                  <th className="p-2">–ò—Å—Ö–æ–¥–Ω–æ–µ</th>
                  <th className="p-2">SEO –Ω–∞–∑–≤–∞–Ω–∏–µ</th>
                  <th className="p-2">SEO –æ–ø–∏—Å–∞–Ω–∏–µ</th>
                  <th className="p-2">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</th>
                  <th className="p-2">–¶–µ–Ω–∞</th>
                  <th className="p-2">–î–µ–π—Å—Ç–≤–∏–µ</th>
                </tr>
              </thead>
              <tbody>
                {result.map((s, i) => (
                  <tr key={i} className="border-t">
                    <td className="p-2 align-top text-gray-800">{s.original_name}</td>
                    <td className="p-2 align-top text-green-700 font-medium">{s.optimized_name}</td>
                    <td className="p-2 align-top text-gray-700">{s.seo_description}</td>
                    <td className="p-2 align-top text-gray-600">{(s.keywords||[]).join(', ')}</td>
                    <td className="p-2 align-top text-gray-600">{s.price || ''}</td>
                    <td className="p-2 align-top">
                      {addedServices.has(i) ? (
                        <span className="text-green-600 text-sm">‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ</span>
                      ) : (
                        <Button 
                          size="sm" 
                          variant="outline" 
                          onClick={() => addServiceToList(i)}
                          className="text-xs"
                        >
                          –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
                        </Button>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}


