import { supabase } from './supabase';

export interface AuthTestResult {
  success: boolean;
  data?: any;
  error?: any;
  timestamp: string;
  testName: string;
}

export class AuthTester {
  private static generateTestEmail(): string {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substring(7);
    return `test-${timestamp}-${random}@example.com`;
  }

  // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º email
  static async testSignUp(): Promise<AuthTestResult> {
    const testEmail = this.generateTestEmail();
    const testPassword = 'TestPassword123!';

    try {
      console.log('üß™ Testing SignUp with:', testEmail);
      
      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
        options: {
          emailRedirectTo: window.location.origin + '/set-password'
        }
      });

      const result: AuthTestResult = {
        success: !error,
        data: data,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'SignUp Test'
      };

      console.log('‚úÖ SignUp Test Result:', result);
      return result;
    } catch (error) {
      const result: AuthTestResult = {
        success: false,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'SignUp Test'
      };
      console.error('‚ùå SignUp Test Error:', result);
      return result;
    }
  }

  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  static async testSignIn(email: string, password: string): Promise<AuthTestResult> {
    try {
      console.log('üß™ Testing SignIn with:', email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      const result: AuthTestResult = {
        success: !error,
        data: data,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'SignIn Test'
      };

      console.log('‚úÖ SignIn Test Result:', result);
      return result;
    } catch (error) {
      const result: AuthTestResult = {
        success: false,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'SignIn Test'
      };
      console.error('‚ùå SignIn Test Error:', result);
      return result;
    }
  }

  // –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  static async testPasswordReset(email: string): Promise<AuthTestResult> {
    try {
      console.log('üß™ Testing Password Reset for:', email);
      
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: window.location.origin + '/set-password'
      });

      const result: AuthTestResult = {
        success: !error,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'Password Reset Test'
      };

      console.log('‚úÖ Password Reset Test Result:', result);
      return result;
    } catch (error) {
      const result: AuthTestResult = {
        success: false,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'Password Reset Test'
      };
      console.error('‚ùå Password Reset Test Error:', result);
      return result;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async testGetUser(): Promise<AuthTestResult> {
    try {
      console.log('üß™ Testing Get User');
      
      const { data: { user }, error } = await supabase.auth.getUser();

      const result: AuthTestResult = {
        success: !error,
        data: { user },
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'Get User Test'
      };

      console.log('‚úÖ Get User Test Result:', result);
      return result;
    } catch (error) {
      const result: AuthTestResult = {
        success: false,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'Get User Test'
      };
      console.error('‚ùå Get User Test Error:', result);
      return result;
    }
  }

  // –¢–µ—Å—Ç rate limit —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  static async testRateLimit(maxRetries: number = 3): Promise<AuthTestResult[]> {
    const results: AuthTestResult[] = [];
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      console.log(`üß™ Testing Rate Limit - Attempt ${attempt}/${maxRetries}`);
      
      const result = await this.testSignUp();
      results.push(result);
      
      if (result.success) {
        console.log('‚úÖ Rate limit test passed on attempt:', attempt);
        break;
      }
      
      if (result.error?.message?.includes('rate limit')) {
        const delay = Math.pow(2, attempt) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        console.log(`‚è≥ Rate limit hit, waiting ${delay}ms before retry...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        console.log('‚ùå Non-rate-limit error, stopping retries');
        break;
      }
    }
    
    return results;
  }

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
  static async runFullAuthTest(): Promise<{
    signUp: AuthTestResult;
    signIn?: AuthTestResult;
    passwordReset?: AuthTestResult;
    getUser: AuthTestResult;
    rateLimit: AuthTestResult[];
  }> {
    console.log('üöÄ Starting Full Authentication Test Suite');
    
    const results = {
      signUp: await this.testSignUp(),
      getUser: await this.testGetUser(),
      rateLimit: await this.testRateLimit(2)
    };

    // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    if (results.signUp.success && results.signUp.data?.user) {
      const testPassword = 'TestPassword123!';
      results.signIn = await this.testSignIn(
        results.signUp.data.user.email,
        testPassword
      );
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ email
    const existingEmail = 'demyanovp@yandex.ru'; // –í–∞—à email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results.passwordReset = await this.testPasswordReset(existingEmail);

    console.log('üìä Full Auth Test Results:', results);
    return results;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase
  static async checkSupabaseConfig(): Promise<AuthTestResult> {
    try {
      console.log('üß™ Checking Supabase Configuration');
      
      const config = {
        url: import.meta.env.VITE_SUPABASE_URL,
        keyType: import.meta.env.VITE_SUPABASE_KEY?.substring(0, 10) + '...',
        hasUrl: !!import.meta.env.VITE_SUPABASE_URL,
        hasKey: !!import.meta.env.VITE_SUPABASE_KEY
      };

      const result: AuthTestResult = {
        success: config.hasUrl && config.hasKey,
        data: config,
        timestamp: new Date().toISOString(),
        testName: 'Supabase Config Test'
      };

      console.log('‚úÖ Supabase Config Test Result:', result);
      return result;
    } catch (error) {
      const result: AuthTestResult = {
        success: false,
        error: error,
        timestamp: new Date().toISOString(),
        testName: 'Supabase Config Test'
      };
      console.error('‚ùå Supabase Config Test Error:', result);
      return result;
    }
  }
} 