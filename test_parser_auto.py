#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""
import sys
import os
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_parser_quick():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print("=== –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ ===")
    
    try:
        from parser import parse_yandex_card
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL
        test_url = "https://yandex.ru/maps/org/gagarin/180566191872/?ll=30.338344%2C59.858729&z=16.88"
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {test_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        import signal
        
        def timeout_handler(signum, frame):
            raise TimeoutError("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        try:
            result = parse_yandex_card(test_url)
            signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result['error']}")
                return False
            else:
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–æ–∫")
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                print(f"–ê–¥—Ä–µ—Å: {result.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {result.get('phone', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                return True
                
        except TimeoutError:
            signal.alarm(0)
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 —Å–µ–∫)")
            return False
        except Exception as e:
            signal.alarm(0)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        traceback.print_exc()
        return False

def test_worker():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º worker"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ worker ===")
    
    try:
        from worker import process_queue
        
        print("–ó–∞–ø—É—Å–∫–∞–µ–º process_queue()...")
        result = process_queue()
        
        print(f"‚úÖ Worker –≤—ã–ø–æ–ª–Ω–µ–Ω: {result}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ worker: {e}")
        traceback.print_exc()
        return False

def test_full_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ ===")
    
    try:
        import sqlite3
        import uuid
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        conn = sqlite3.connect("reports.db")
        cursor = conn.cursor()
        
        test_id = str(uuid.uuid4())
        test_url = "https://yandex.ru/maps/org/gagarin/180566191872/?ll=30.338344%2C59.858729&z=16.88"
        test_user_id = "f2123626-71b1-4424-8b2a-0bc93ab8f2eb"  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        cursor.execute("""
            INSERT INTO ParseQueue (id, url, user_id, status)
            VALUES (?, ?, ?, 'pending')
        """, (test_id, test_url, test_user_id))
        
        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {test_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker
        from worker import process_queue
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏...")
        process_queue()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT status FROM ParseQueue WHERE id = ?", (test_id,))
        status = cursor.fetchone()
        
        if status:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status[0]}")
            
            if status[0] == 'completed':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ –æ—Ç—á—ë—Ç
                cursor.execute("SELECT id FROM Cards WHERE user_id = ?", (test_user_id,))
                cards = cursor.fetchall()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {len(cards)}")
            elif status[0] == 'error':
                print("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            elif status[0] == 'captcha_required':
                print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ø—á–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status[0]}")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    parser_ok = test_parser_quick()
    
    # –¢–µ—Å—Ç 2: Worker
    worker_ok = test_worker()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    workflow_ok = test_full_workflow()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ü–∞—Ä—Å–µ—Ä: {'‚úÖ OK' if parser_ok else '‚ùå FAIL'}")
    print(f"Worker: {'‚úÖ OK' if worker_ok else '‚ùå FAIL'}")
    print(f"–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {'‚úÖ OK' if workflow_ok else '‚ùå FAIL'}")
    
    if parser_ok and worker_ok and workflow_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")

if __name__ == "__main__":
    main()
