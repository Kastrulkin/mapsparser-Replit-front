#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DataForSEO MCP —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import os
from typing import Dict, Any

# URL DataForSEO MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Smithery.ai
DATAFORSEO_MCP_URL = "https://server.smithery.ai/@moaiandin/mcp-dataforseo"

def call_dataforseo_mcp(tool_name: str, params: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç DataForSEO MCP —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ HTTP
    """
    try:
        headers = {
            "Content-Type": "application/json"
        }
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/call",
            "params": {
                "name": tool_name,
                "arguments": params
            }
        }
        
        response = requests.post(DATAFORSEO_MCP_URL, headers=headers, json=payload)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return {"error": f"HTTP {response.status_code}"}
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ DataForSEO MCP: {e}")
        return {"error": str(e)}

def test_serp_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ SERP"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ SERP...")
    
    params = {
        "keyword": "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –º–æ—Å–∫–≤–∞",
        "language_code": "ru",
        "location_name": "–ú–æ—Å–∫–≤–∞,–†–æ—Å—Å–∏—è",
        "search_engine": "google",
        "depth": 10
    }
    
    result = call_dataforseo_mcp("serp-organic-live-advanced", params)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç SERP –∞–Ω–∞–ª–∏–∑–∞: {json.dumps(result, indent=2, ensure_ascii=False)}")

def test_keyword_volume():
    """–¢–µ—Å—Ç –æ–±—ä–µ–º–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
    
    params = {
        "keywords": ["—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "–º–∞–Ω–∏–∫—é—Ä"],
        "language_code": "ru",
        "location_name": "–†–æ—Å—Å–∏—è"
    }
    
    result = call_dataforseo_mcp("keywords-google-ads-search-volume", params)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {json.dumps(result, indent=2, ensure_ascii=False)}")

def test_onpage_analysis():
    """–¢–µ—Å—Ç on-page –∞–Ω–∞–ª–∏–∑–∞"""
    print("üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º on-page –∞–Ω–∞–ª–∏–∑...")
    
    params = {
        "url": "https://beautybot.pro",
        "enable_javascript": True
    }
    
    result = call_dataforseo_mcp("instant_pages", params)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç on-page –∞–Ω–∞–ª–∏–∑–∞: {json.dumps(result, indent=2, ensure_ascii=False)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ DataForSEO MCP —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: SERP –∞–Ω–∞–ª–∏–∑
    test_serp_analysis()
    print("\n" + "-" * 30 + "\n")
    
    # –¢–µ—Å—Ç 2: –û–±—ä–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    test_keyword_volume()
    print("\n" + "-" * 30 + "\n")
    
    # –¢–µ—Å—Ç 3: On-page –∞–Ω–∞–ª–∏–∑
    test_onpage_analysis()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 