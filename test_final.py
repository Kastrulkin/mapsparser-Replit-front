#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã SEO-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""
import os
import sys
import uuid
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('src')

def test_complete_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º UUID"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ SEO-–ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: Hugging Face API
    print("1Ô∏è‚É£ –¢–µ—Å—Ç Hugging Face API:")
    try:
        from ai_analyzer import call_huggingface_analysis
        
        test_text = "–ö–∞—Ñ–µ '–£—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ' —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 4.2 –∏ 45 –æ—Ç–∑—ã–≤–∞–º–∏"
        result = call_huggingface_analysis(test_text)
        
        if 'error' not in result:
            print("‚úÖ Hugging Face API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            hf_test = True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face: {result}")
            hf_test = False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Hugging Face: {e}")
        hf_test = False
    
    print()
    
    # –¢–µ—Å—Ç 2: AI-–∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("2Ô∏è‚É£ –¢–µ—Å—Ç AI-–∞–Ω–∞–ª–∏–∑–∞:")
    try:
        from ai_analyzer import analyze_business_data
        
        test_data = {
            "title": "–†–µ—Å—Ç–æ—Ä–∞–Ω '–ü—Ä–µ—Å—Ç–∏–∂'",
            "address": "–ø—Ä. –ú–∏—Ä–∞, 15, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "rating": 4.8,
            "reviews_count": 127,
            "overview": {
                "description": "–≠–ª–∏—Ç–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –∞–≤—Ç–æ—Ä—Å–∫–æ–π –∫—É—Ö–Ω–µ–π –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º"
            },
            "categories": ["–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è"]
        }
        
        analysis = analyze_business_data(test_data)
        
        print(f"‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
        print(f"  –û—Ü–µ–Ω–∫–∞: {analysis['score']}/100")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(analysis['recommendations'])}")
        
        ai_test = True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        ai_test = False
    
    print()
    
    # –¢–µ—Å—Ç 3: Supabase —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º UUID
    print("3Ô∏è‚É£ –¢–µ—Å—Ç Supabase —Å UUID:")
    try:
        from supabase import create_client, Client
        
        supabase_url = os.getenv('SUPABASE_URL')
        supabase_key = os.getenv('SUPABASE_KEY')
        
        if supabase_url and supabase_key:
            supabase: Client = create_client(supabase_url, supabase_key)
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID
            test_user_id = str(uuid.uuid4())
            
            test_queue_item = {
                "user_id": test_user_id,
                "url": "https://yandex.ru/maps/org/test-restaurant/1234567890",
                "status": "pending"
            }
            
            print(f"üîÑ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å UUID: {test_user_id[:8]}...")
            result = supabase.table("ParseQueue").insert(test_queue_item).execute()
            
            if result.data:
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                supabase.table("ParseQueue").delete().eq("user_id", test_user_id).execute()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                
                supabase_test = True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å")
                supabase_test = False
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase")
            supabase_test = False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
        supabase_test = False
    
    print()
    
    # –¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    print("4Ô∏è‚É£ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞:")
    try:
        from report import generate_html_report
        
        test_card = {
            "title": "–ö–∞—Ñ–µ '–°–æ–ª–Ω—ã—à–∫–æ'",
            "address": "—É–ª. –ü—É—à–∫–∏–Ω–∞, 10, –ú–æ—Å–∫–≤–∞",
            "rating": 4.5,
            "reviews_count": 89
        }
        
        analysis_data = {
            'score': 75,
            'recommendations': [
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–ª—é–¥",
                "–£–ª—É—á—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥",
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã"
            ],
            'ai_analysis': {
                'generated_text': '–•–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤. –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.'
            }
        }
        
        report_path = generate_html_report(test_card, analysis_data)
        
        if os.path.exists(report_path):
            file_size = os.path.getsize(report_path)
            print(f"‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {file_size} –±–∞–π—Ç")
            report_test = True
        else:
            print("‚ùå –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            report_test = False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        report_test = False
    
    print()
    
    # –ò—Ç–æ–≥–∏
    print("=" * 60)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"Hugging Face API: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if hf_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"AI-–∞–Ω–∞–ª–∏–∑: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if ai_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"Supabase: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if supabase_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if report_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    success_count = sum([hf_test, ai_test, supabase_test, report_test])
    total_count = 4
    
    print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {success_count}/{total_count}")
    
    if success_count == total_count:
        print("\nüéâ –í–°–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω!")
        return True
    elif success_count >= 3:
        print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –í –û–°–ù–û–í–ù–û–ú –†–ê–ë–û–¢–ê–ï–¢!")
        print("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
        return True
    else:
        print("\n‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!")
        return False

if __name__ == "__main__":
    success = test_complete_system()
    
    if success:
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä: python3 src/worker.py")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: cd frontend && npm run dev")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –æ—Ç—á—ë—Ç—ã")
    else:
        print("\nüîß –ù–ï–û–ë–•–û–î–ò–ú–û –ò–°–ü–†–ê–í–ò–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú") 