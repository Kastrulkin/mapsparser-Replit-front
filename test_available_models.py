#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Hugging Face API
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv()

def test_model(model_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å"""
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    if not hf_token:
        print("‚ùå HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    payload = {
        "inputs": "Hello, how are you?",
        "parameters": {
            "max_length": 50,
            "temperature": 0.7,
            "do_sample": True
        }
    }
    
    try:
        print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        response = requests.post(
            f"https://api-inference.huggingface.co/models/{model_name}",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            print(f"‚úÖ {model_name} - –†–ê–ë–û–¢–ê–ï–¢!")
            return True
        else:
            print(f"‚ùå {model_name} - –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå {model_name} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Hugging Face")
    print("=" * 50)
    
    models_to_test = [
        "gpt2",
        "distilgpt2", 
        "facebook/bart-base",
        "t5-base",
        "microsoft/DialoGPT-small",
        "EleutherAI/gpt-neo-125M"
    ]
    
    working_models = []
    
    for model in models_to_test:
        if test_model(model):
            working_models.append(model)
        print()
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("=" * 30)
    if working_models:
        print("‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏:")
        for model in working_models:
            print(f"  - {model}")
    else:
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return working_models

if __name__ == "__main__":
    working_models = main() 