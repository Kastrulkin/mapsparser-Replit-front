#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import os
import shutil
import glob

def cleanup_project():
    """–û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    files_to_delete = [
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        "view_enjoy_studio_report.py",
        "check_enjoy_studio_data.py", 
        "find_enjoy_studio_vps.py",
        "find_enjoy_studio_report.py",
        "test_parser_logic.py",
        "test_parser_fixes.py",
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π
        "test_found_models.py",
        "test_full_analysis.py",
        "test_working_models.py",
        "test_specific_qwen_models.py",
        "test_qwen3_models.py",
        "test_official_mcp.py",
        "test_rubert_model.py",
        "test_russian_models.py",
        "test_available_models.py",
        "test_ai_analysis_only.py",
        "test_updated_analysis.py",
        "test_dataforseo_integration.py",
        "test_mcp_models.py",
        "test_report_endpoints.py",
        "test_final.py",
        "test_full_pipeline.py",
        "test_huggingface.py",
        
        # –§–∞–π–ª—ã –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        "find_russian_models.py",
        "find_best_seo_models.py",
        "find_best_models.py",
        "find_text_generation_models.py",
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "check_auth_users.py",
        "fix_user_reports.py",
        "check_gmail_user.py",
        "debug_dashboard_data.py",
        "update_user_id.py",
        "update_user_data.py",
        "update_user_data_final.py",
        "test_user_data.py",
        "fix_user_email.py",
        "fix_encoding.py",
        "fix_report_path.py",
        "check_user_by_email.py",
        "create_report_file.py",
        "check_reports.py",
        "check_rls_policies.py",
        "check_queue.py",
        "check_report_details.py",
        "create_user_with_auth_id.py",
        "check_user_complete.py",
        "check_user_profile.py",
        "check_user_reports.py",
        "add_yandex_url_field.py",
        "update_users_fixed.py",
        "check_table_schema.py",
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        ".DS_Store",
        "index.html",
        
        # SQL —Ñ–∞–π–ª—ã
        "update_user_data_final.sql",
        "update_user_with_report.sql",
        "update_users_simple.sql",
        "add_yandex_url_migration.sql",
        
        # Shell —Å–∫—Ä–∏–ø—Ç—ã
        "run_update.sh",
        "run_check.sh",
        "update-nginx.sh",
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        "EmailYandexForm.tsx"
    ]
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    deleted_count = 0
    for file_path in files_to_delete:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: {file_path}")
                deleted_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É attached_assets
    print("\nüßπ –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É attached_assets...")
    attached_dir = "attached_assets"
    if os.path.exists(attached_dir):
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        patterns_to_delete = [
            "save_to_supabase_*.py",
            "utils_*.py",
            "parser_*.py",
            "report_*.py",
            "main_*.py",
            "analyzer_*.py",
            "Pasted-*.txt",
            "–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞*.png"
        ]
        
        for pattern in patterns_to_delete:
            files = glob.glob(os.path.join(attached_dir, pattern))
            for file_path in files:
                try:
                    os.remove(file_path)
                    print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: {file_path}")
                    deleted_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É .cursor –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è
    cursor_dir = ".cursor"
    if os.path.exists(cursor_dir) and not os.listdir(cursor_dir):
        try:
            os.rmdir(cursor_dir)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {cursor_dir}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {cursor_dir}: {e}")
    
    print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    print("\nüìÅ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    important_files = [
        "src/",
        "frontend/",
        "supabase/",
        "data/",
        "requirements.txt",
        "README.md",
        "–ò–ù–°–¢–†–£–ö–¶–ò–Ø_–ü–û_–ó–ê–ü–£–°–ö–£.md",
        "VPS_UPDATE.md",
        "web_server.py",
        "web_server_fixed.py",
        "seo-worker.service",
        "seo-download.service",
        "nginx-config.conf"
    ]
    
    for file_path in important_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")

if __name__ == "__main__":
    cleanup_project() 