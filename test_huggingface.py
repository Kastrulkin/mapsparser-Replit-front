#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hugging Face API
"""
import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_huggingface_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hugging Face API"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    if not hf_token:
        print("‚ùå HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {hf_token[:10]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
    model_name = "facebook/bart-base"
    url = f"https://api-inference.huggingface.co/models/{model_name}"
    
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "inputs": "Hello, how are you?",
        "parameters": {
            "max_length": 50,
            "temperature": 0.7,
            "do_sample": True
        }
    }
    
    try:
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_seo_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SEO-–∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Hugging Face"""
    
    from src.model_config import get_model_config, get_prompt
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    test_card_data = {
        "title": "–ö–∞—Ñ–µ '–£—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ'",
        "address": "—É–ª. –õ–µ–Ω–∏–Ω–∞, 123, –ú–æ—Å–∫–≤–∞",
        "rating": 4.2,
        "reviews_count": 45,
        "overview": {
            "description": "–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ —Å –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–µ–π –∏ –ø—Ä–∏—è—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π"
        },
        "categories": ["–ö–∞—Ñ–µ", "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"]
    }
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis_text = f"""
    –ù–∞–∑–≤–∞–Ω–∏–µ: {test_card_data['title']}
    –ê–¥—Ä–µ—Å: {test_card_data['address']}
    –†–µ–π—Ç–∏–Ω–≥: {test_card_data['rating']}
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {test_card_data['reviews_count']}
    –û–ø–∏—Å–∞–Ω–∏–µ: {test_card_data['overview']['description']}
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(test_card_data['categories'])}
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = get_prompt("seo_analysis", analysis_text)
    print(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n{prompt}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
    model_config = get_model_config()
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model_config['name']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_length": model_config["max_length"],
            "temperature": model_config["temperature"],
            "do_sample": model_config["do_sample"],
            "top_p": model_config["top_p"]
        }
    }
    
    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ SEO-–∞–Ω–∞–ª–∏–∑...")
        response = requests.post(
            f"https://api-inference.huggingface.co/models/{model_config['name']}",
            headers=headers,
            json=payload,
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ SEO-–∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ SEO-–∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hugging Face API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    basic_test = test_huggingface_connection()
    
    # –¢–µ—Å—Ç 2: SEO-–∞–Ω–∞–ª–∏–∑
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç SEO-–∞–Ω–∞–ª–∏–∑–∞:")
    seo_test = test_seo_analysis()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ –£–°–ü–ï–•' if basic_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"SEO-–∞–Ω–∞–ª–∏–∑: {'‚úÖ –£–°–ü–ï–•' if seo_test else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if basic_test and seo_test:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Hugging Face API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Hugging Face API.") 