#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ Hugging Face –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
"""
import subprocess
import json
import os
from dotenv import load_dotenv

load_dotenv()

def test_mcp_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç MCP —Å–µ—Ä–≤–µ—Ä Hugging Face"""
    
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    if not hf_token:
        print("‚ùå HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ Hugging Face...")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
        cmd = [
            "npx", "-y", "huggingface-mcp-server",
            "--transport", "stdio",
            "--api-key", hf_token
        ]
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã: {' '.join(cmd)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen(
            cmd,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        mcp_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/list",
            "params": {}
        }
        
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        request_str = json.dumps(mcp_request) + "\n"
        
        stdout, stderr = process.communicate(input=request_str, timeout=10)
        
        print(f"üì• –û—Ç–≤–µ—Ç stdout: {stdout}")
        print(f"‚ùå –û—à–∏–±–∫–∏ stderr: {stderr}")
        
        if stdout:
            try:
                response = json.loads(stdout)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {json.dumps(response, indent=2)}")
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {stdout}")
        
        process.terminate()
        
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        process.kill()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_direct_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π API –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    print("\n" + "=" * 60)
    print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä—è–º—ã–º API...")
    print("=" * 60)
    
    import requests
    
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    # –ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    search_queries = [
        "text-generation",
        "text2text-generation",
        "russian language"
    ]
    
    for query in search_queries:
        print(f"\nüìù –ü–æ–∏—Å–∫: {query}")
        
        try:
            response = requests.get(
                "https://huggingface.co/api/models",
                headers=headers,
                params={
                    "search": query,
                    "sort": "downloads",
                    "direction": "-1",
                    "limit": 5
                }
            )
            
            if response.status_code == 200:
                models = response.json()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
                
                for i, model in enumerate(models[:3], 1):
                    print(f"   {i}. {model.get('id', 'N/A')} ({model.get('downloads', 0):,} –∑–∞–≥—Ä—É–∑–æ–∫)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    test_mcp_server()
    test_direct_api() 