#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat API
"""
import os

class GigaChatConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è GigaChat API"""
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ GigaChat
    AVAILABLE_MODELS = {
        "GigaChat-2-Pro": {
            "name": "GigaChat-2-Pro",
            "description": "–°–∞–º–∞—è –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
            "max_tokens": 4000,
            "supports_images": True,
            "recommended_for": ["–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"]
        },
        "GigaChat-3": {
            "name": "GigaChat-3", 
            "description": "–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
            "max_tokens": 4000,
            "supports_images": True,
            "recommended_for": ["–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑"]
        },
        "GigaChat-2.5": {
            "name": "GigaChat-2.5",
            "description": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∑–∞–¥–∞—á",
            "max_tokens": 4000,
            "supports_images": True,
            "recommended_for": ["–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "–æ–±—â–∏–µ –∑–∞–¥–∞—á–∏"]
        }
    }
    
    def __init__(self):
        # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        self.model = os.getenv('GIGACHAT_MODEL', 'GigaChat-2-Pro')
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.temperature = float(os.getenv('GIGACHAT_TEMPERATURE', '0.1'))
        self.max_tokens = int(os.getenv('GIGACHAT_MAX_TOKENS', '6000'))
        
        # –¢–∞–π–º–∞—É—Ç—ã
        self.request_timeout = int(os.getenv('GIGACHAT_TIMEOUT', '60'))
        self.retry_attempts = int(os.getenv('GIGACHAT_RETRY_ATTEMPTS', '3'))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        if self.model not in self.AVAILABLE_MODELS:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ú–æ–¥–µ–ª—å '{self.model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GigaChat-2-Pro")
            self.model = 'GigaChat-2-Pro'
    
    def get_model_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        return self.AVAILABLE_MODELS.get(self.model, self.AVAILABLE_MODELS['GigaChat-2-Pro'])
    
    def get_model_config(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞"""
        model_info = self.get_model_info()
        return {
            "model": self.model,
            "temperature": self.temperature,
            "max_tokens": min(self.max_tokens, model_info['max_tokens']),
            "timeout": self.request_timeout,
            "retry_attempts": self.retry_attempts
        }
    
    def list_available_models(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return list(self.AVAILABLE_MODELS.keys())
    
    def set_model(self, model_name: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å"""
        if model_name in self.AVAILABLE_MODELS:
            self.model = model_name
            return True
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = GigaChatConfig()

def get_gigachat_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GigaChat"""
    return config

def set_gigachat_model(model_name: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å GigaChat"""
    return config.set_model(model_name)

def get_available_models():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    return config.list_available_models()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat:")
    print(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {config.model}")
    print(f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config.temperature}")
    print(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {config.max_tokens}")
    print(f"–¢–∞–π–º–∞—É—Ç: {config.request_timeout}—Å")
    print(f"–ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞: {config.retry_attempts}")
    
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for model_name, info in config.AVAILABLE_MODELS.items():
        status = "‚úÖ" if model_name == config.model else "‚ö™"
        print(f"{status} {model_name}: {info['description']}")
    
    print(f"\nüéØ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.get_model_config()}")
