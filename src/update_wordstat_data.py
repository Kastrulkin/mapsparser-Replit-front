#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç
"""

import os
import sys
import json
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__))))

from wordstat_client import WordstatClient, WordstatDataProcessor
from wordstat_config import config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not config.is_configured():
        print("‚ùå API –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"üîó –ü–æ–ª—É—á–∏—Ç–µ OAuth —Ç–æ–∫–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {config.get_auth_url()}")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_WORDSTAT_OAUTH_TOKEN")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = WordstatClient(config.client_id, config.client_secret)
    client.set_access_token(config.oauth_token)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±—å—é—Ç–∏-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    beauty_keywords = [
        "—Å—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è",
        "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å", 
        "–º–∞–Ω–∏–∫—é—Ä",
        "–ø–µ–¥–∏–∫—é—Ä",
        "–º–∞—Å—Å–∞–∂",
        "–±—Ä–æ–≤–∏",
        "—Ä–µ—Å–Ω–∏—Ü—ã",
        "—É–∫–ª–∞–¥–∫–∞",
        "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–±–ª–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è",
        "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã",
        "–±–∞—Ä–±–µ—Ä—à–æ–ø",
        "—Å–ø–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "–æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    ]
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(beauty_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        popular_data = client.get_popular_queries(beauty_keywords, config.default_region)
        
        if not popular_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        print("üîó –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        similar_queries = []
        
        for keyword in beauty_keywords[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–≤–æ—Ç—ã
            similar_data = client.get_similar_queries(keyword, config.default_region)
            if similar_data and 'data' in similar_data:
                similar_queries.extend(similar_data['data'])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_queries = []
        if popular_data and 'data' in popular_data:
            all_queries.extend(popular_data['data'])
        all_queries.extend(similar_queries)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        processor = WordstatDataProcessor()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        api_data = {'data': all_queries}
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        prompts_dir = Path(__file__).parent.parent / "prompts"
        file_path = prompts_dir / "popular_queries_with_clicks.txt"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        processor.save_queries_to_file(api_data, str(file_path))
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
        print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        metadata = {
            'last_update': datetime.now().isoformat(),
            'queries_count': len(all_queries),
            'region': config.default_region,
            'region_name': config.get_region_name(config.default_region)
        }
        
        metadata_path = prompts_dir / "wordstat_metadata.json"
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {metadata_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_update_needed() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    metadata_path = Path(__file__).parent.parent / "prompts" / "wordstat_metadata.json"
    
    if not metadata_path.exists():
        return True
    
    try:
        with open(metadata_path, 'r', encoding='utf-8') as f:
            metadata = json.load(f)
        
        last_update = datetime.fromisoformat(metadata['last_update'])
        update_interval = timedelta(seconds=config.update_interval)
        
        return datetime.now() - last_update > update_interval
        
    except Exception:
        return True

if __name__ == "__main__":
    if check_update_needed():
        success = main()
        if success:
            print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("üí• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    else:
        print("‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã)")
