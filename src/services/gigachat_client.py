#!/usr/bin/env python3
"""
GigaChat –∫–ª–∏–µ–Ω—Ç —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –∏ retry –ª–æ–≥–∏–∫–æ–π
"""
import os
import json
import time
import random
import base64
import requests
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime, timedelta
from gigachat_config import get_gigachat_config

class GigaChatClient:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"""
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.oauth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        self.credentials_pool: List[Tuple[str, str]] = []
        self.current_index = 0
        self.access_token = None
        self.token_expires_at = 0
        self.last_auth_error = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GigaChat
        self.config = get_gigachat_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ TLS
        # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –∫–∞—Å—Ç–æ–º–Ω–æ–º—É CA —á–µ—Ä–µ–∑ GIGACHAT_CA_BUNDLE –∏–ª–∏ REQUESTS_CA_BUNDLE
        ca_bundle = os.getenv("GIGACHAT_CA_BUNDLE") or os.getenv("REQUESTS_CA_BUNDLE")
        if ca_bundle and os.path.exists(ca_bundle):
            self.verify_tls = ca_bundle  # verify –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É CA
            print(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CA bundle: {ca_bundle}")
        elif os.getenv("GIGACHAT_SSL_VERIFY", "true").lower() == "false":
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –µ—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ
            self.verify_tls = False
            print("‚ö†Ô∏è SSL –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è GigaChat")
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
            self.verify_tls = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self._load_credentials()
    
    def _load_credentials(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –§–æ—Ä–º–∞—Ç: GIGACHAT_KEYS="id1:secret1;id2:secret2;id3:secret3"
        keys_env = os.getenv("GIGACHAT_KEYS", "").strip()
        if keys_env:
            try:
                for pair in keys_env.split(";"):
                    pair = pair.strip()
                    if not pair:
                        continue
                    cid, csec = pair.split(":", 1)
                    self.credentials_pool.append((cid.strip(), csec.strip()))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GIGACHAT_KEYS: {e}")
        
        # Fallback –∫ —Å—Ç–∞—Ä—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        if not self.credentials_pool:
            env_id = os.getenv('GIGACHAT_CLIENT_ID')
            env_secret = os.getenv('GIGACHAT_CLIENT_SECRET')
            if env_id and env_secret:
                self.credentials_pool = [(env_id, env_secret)]
        
        if not self.credentials_pool:
            raise RuntimeError("GigaChat –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GIGACHAT_KEYS –∏–ª–∏ GIGACHAT_CLIENT_ID/GIGACHAT_CLIENT_SECRET")
    
    def _rotate_credentials(self):
        """–†–æ—Ç–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É"""
        if not self.credentials_pool:
            return
        self.current_index = (self.current_index + 1) % len(self.credentials_pool)
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–ª—é—á–∞
        self.access_token = None
        self.token_expires_at = 0
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∫–ª—é—á {self.current_index + 1}/{len(self.credentials_pool)}")
    
    def _get_current_credentials(self) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if not self.credentials_pool:
            raise RuntimeError("GigaChat credentials are not configured")
        return self.credentials_pool[self.current_index]
    
    def get_access_token(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –∏ retry"""
        if self.access_token and time.time() < self.token_expires_at:
            return self.access_token
        
        last_error = None
        attempts = min(3, max(1, len(self.credentials_pool) or 1))
        
        for attempt in range(attempts):
            try:
                client_id, client_secret = self._get_current_credentials()
                url = self.oauth_url
                data = {"scope": "GIGACHAT_API_PERS"}
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π RqUID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                import uuid
                rquid = str(uuid.uuid4())
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Authorization Key –Ω–∞–ø—Ä—è–º—É—é (—É–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                headers = {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "application/json",
                    "RqUID": rquid,
                    "Authorization": f"Basic {client_secret}"
                }
                
                response = requests.post(
                    url, 
                    data=data, 
                    headers=headers, 
                    timeout=30,
                    verify=self.verify_tls
                )
                
                if response.status_code in (401, 403):
                    # –ù–µ–≤–µ—Ä–Ω—ã–π/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–ª—é—á ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                    last_error = RuntimeError(f"Auth failed for key {self.current_index + 1}: {response.status_code}")
                    self._rotate_credentials()
                    continue
                
                response.raise_for_status()
                token_data = response.json()
                self.access_token = token_data["access_token"]
                # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                self.token_expires_at = time.time() + (25 * 60)
                print(f"‚úÖ GigaChat —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (–∫–ª—é—á {self.current_index + 1})")
                return self.access_token
                
            except Exception as e:
                last_error = e
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
                time.sleep(0.5 * (2 ** attempt) + random.random() * 0.25)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –∫–ª—é—á
                self._rotate_credentials()
        
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat: {last_error}")
    
    def _post_with_retry(self, url: str, headers: Dict[str, str], json_body: Dict[str, Any], max_retries: int = 3) -> Dict[str, Any]:
        """POST –∑–∞–ø—Ä–æ—Å —Å retry –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
        last_error = None
        
        for attempt in range(max_retries):
            try:
                response = requests.post(url, json=json_body, headers=headers, timeout=60, verify=self.verify_tls)
                
                # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–æ—Ç–∞—Ü–∏—é –∫–ª—é—á–∞ –∏ –ø–æ–≤—Ç–æ—Ä
                if response.status_code in (401, 403, 429, 503):
                    last_error = RuntimeError(f"HTTP {response.status_code}")
                    # –°–º–µ–Ω–∏–º –∫–ª—é—á –∏ –æ–±–Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω
                    self._rotate_credentials()
                    headers["Authorization"] = f"Bearer {self.get_access_token()}"
                else:
                    response.raise_for_status()
                    return response.json()
                    
            except Exception as e:
                last_error = e
            
            # –ë—ç–∫-–æ—Ñ—Ñ —Å –¥–∂–∏—Ç—Ç–µ—Ä–æ–º
            time.sleep(0.75 * (2 ** attempt) + random.random() * 0.3)
        
        raise RuntimeError(f"–ó–∞–ø—Ä–æ—Å –∫ GigaChat –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤: {last_error}")
    
    def upload_file_simple(self, file_data: bytes, filename: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ GigaChat"""
        try:
            token = self.get_access_token()
            
            url = f"{self.base_url}/files"
            headers = {
                "Authorization": f"Bearer {token}"
            }
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç multipart/form-data
            files = {'file': (filename, file_data, 'image/png')}
            data = {'purpose': 'general'}
            
            response = requests.post(url, headers=headers, files=files, data=data, verify=False, timeout=60)
            
            if response.status_code == 200:
                result = response.json()
                print(f"DEBUG: –û—Ç–≤–µ—Ç –æ—Ç /files: {result}")
                return result.get('id')
            else:
                print(f"DEBUG: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                print(f"DEBUG: –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ upload_file_simple: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def analyze_screenshot(self, image_base64: str, prompt: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            print(f"üö® DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            print(f"üö® DEBUG: –†–∞–∑–º–µ—Ä base64: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ GigaChat
            import base64
            file_data = base64.b64decode(image_base64)
            file_id = self.upload_file_simple(file_data, "screenshot.png")
            print(f"üö® DEBUG: –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, file_id: {file_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            token = self.get_access_token()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            url = f"{self.base_url}/chat/completions"
            headers = {
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            }
            
            model_config = self.config.get_model_config()
            data = {
                "model": model_config["model"],
                "messages": [
                    {
                        "role": "user",
                        "content": prompt,
                        "attachments": [file_id]
                    }
                ],
                "parameters": {
                    "temperature": model_config.get("temperature", 0.1),
                    "max_tokens": model_config.get("max_tokens", 2000),
                    "frequency_penalty": model_config.get("frequency_penalty", 0),
                    "presence_penalty": model_config.get("presence_penalty", 0)
                }
            }
            
            result = self._post_with_retry(url, headers, data, max_retries=3)
            print(f"üö® DEBUG: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat: {result}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GigaChat
            if "alternatives" in result:
                content = result["alternatives"][0]["message"]["content"]
                print(f"üö® DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É 'alternatives'")
            elif "choices" in result:
                content = result["choices"][0]["message"]["content"]
                print(f"üö® DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É 'choices' (—Å—Ç–∞—Ä–∞—è)")
            else:
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat")
            
            print(f"üö® DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")
            
            # –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            import re
            import json
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É }
            last_brace = content.rfind('}')
            if last_brace != -1:
                cleaned_content = content[:last_brace + 1]
            else:
                cleaned_content = content
            
            print(f"üö® DEBUG: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {content[:200]}...")
            print(f"üö® DEBUG: –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_content[:200]}...")
            print(f"üö® DEBUG: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ (–ø–æ–∑–∏—Ü–∏—è 830-840): {content[830:840]}")
            print(f"üö® DEBUG: –î–ª–∏–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ: {len(content)}, –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ: {len(cleaned_content)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –≤–∞–ª–∏–¥–Ω—ã–π
            try:
                json.loads(cleaned_content)
                print(f"‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É
                cleaned_content = re.sub(r'}[^}]*$', '}', content)
                print(f"üö® DEBUG: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: {cleaned_content[:200]}...")
            
            return cleaned_content
            
        except Exception as e:
            print(f"üö® DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ analyze_screenshot: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")
    
    def analyze_text(self, prompt: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            token = self.get_access_token()
            
            url = f"{self.base_url}/chat/completions"
            headers = {
                "Authorization": f"Bearer {token}",
                "Content-Type": "application/json"
            }
            
            model_config = self.config.get_model_config()
            data = {
                "model": model_config["model"],
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "parameters": {
                    "temperature": model_config["temperature"],
                    "max_tokens": model_config["max_tokens"],
                    "top_p": model_config.get("top_p", 1),
                    "frequency_penalty": model_config.get("frequency_penalty", 0),
                    "presence_penalty": model_config.get("presence_penalty", 0)
                }
            }
            
            result = self._post_with_retry(url, headers, data, max_retries=3)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GigaChat
            if "alternatives" in result:
                content = result["alternatives"][0]["message"]["content"]
            elif "choices" in result:
                content = result["choices"][0]["message"]["content"]
            else:
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat")
            
            # –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            import re
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ }
            cleaned_content = re.sub(r'}[^}]*$', '}', content)
            print(f"üö® DEBUG: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {content[:100]}...")
            print(f"üö® DEBUG: –û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {cleaned_content[:100]}...")
            
            return cleaned_content
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            raise
    
    def parse_json_response(self, response_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞ —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            start_idx = response_text.find('{')
            end_idx = response_text.rfind('}') + 1
            
            if start_idx != -1 and end_idx != -1:
                json_str = response_text[start_idx:end_idx]
                return json.loads(json_str)
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                return {
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ",
                    "raw_response": response_text[:500]
                }
                
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å JSON
            try:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                cleaned = response_text.strip()
                if cleaned.startswith('```json'):
                    cleaned = cleaned[7:]
                if cleaned.endswith('```'):
                    cleaned = cleaned[:-3]
                cleaned = cleaned.strip()
                
                return json.loads(cleaned)
            except:
                return {
                    "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON",
                    "raw_response": response_text[:500]
                }
        except Exception as e:
            return {
                "error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                "raw_response": response_text[:500]
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
_gigachat_client = None

def get_gigachat_client() -> GigaChatClient:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GigaChat –∫–ª–∏–µ–Ω—Ç–∞"""
    global _gigachat_client
    if _gigachat_client is None:
        _gigachat_client = GigaChatClient()
    return _gigachat_client

def analyze_screenshot_with_gigachat(image_base64: str, prompt: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat"""
    try:
        client = get_gigachat_client()
        response = client.analyze_screenshot(image_base64, prompt)
        return client.parse_json_response(response)
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}",
            "fallback": True
        }

def analyze_text_with_gigachat(prompt: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GigaChat"""
    try:
        client = get_gigachat_client()
        response = client.analyze_text(prompt)
        return client.parse_json_response(response)
    except Exception as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}",
            "fallback": True
        }
