#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase –≤ SQLite
"""
import sqlite3
import uuid
from datetime import datetime
from auth_system import create_user, hash_password

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect("reports.db")
    conn.row_factory = sqlite3.Row
    return conn

def migrate_users_from_supabase():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
    # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        {
            "email": "admin@beautybot.pro",
            "password": "admin123",
            "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "phone": "+7 (999) 123-45-67"
        },
        {
            "email": "test@example.com", 
            "password": "test123",
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "phone": "+7 (999) 987-65-43"
        }
    ]
    
    migrated_count = 0
    
    for user_data in test_users:
        try:
            result = create_user(
                user_data["email"],
                user_data["password"], 
                user_data["name"],
                user_data["phone"]
            )
            
            if "error" not in result:
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                migrated_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['email']}: {result['error']}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['email']}: {e}")
    
    print(f"\nüìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {migrated_count}")
    return migrated_count

def create_admin_user():
    """–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
    admin_email = "admin@beautybot.pro"
    admin_password = "admin123"
    admin_name = "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    try:
        result = create_user(admin_email, admin_password, admin_name)
        
        if "error" not in result:
            print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {admin_email}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {result['error']}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return None

def list_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            SELECT id, email, name, phone, created_at, is_active, is_verified
            FROM Users 
            ORDER BY created_at DESC
        """)
        
        users = cursor.fetchall()
        
        if not users:
            print("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        print("-" * 80)
        for user in users:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user['is_active'] else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            verified = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" if user['is_verified'] else "‚è≥ –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
            print(f"ID: {user['id']}")
            print(f"Email: {user['email']}")
            print(f"–ò–º—è: {user['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"–°—Ç–∞—Ç—É—Å: {status}")
            print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {verified}")
            print(f"–°–æ–∑–¥–∞–Ω: {user['created_at']}")
            print("-" * 80)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    finally:
        conn.close()

def create_test_invite():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"""
    from auth_system import create_invite
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT id FROM Users LIMIT 1")
        user = cursor.fetchone()
        
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
            return
        
        result = create_invite(user['id'], "invited@example.com")
        
        if "error" not in result:
            print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result['email']}")
            print(f"–¢–æ–∫–µ–Ω: {result['token']}")
            print(f"–°—Å—ã–ª–∫–∞: https://beautybot.pro/invite/{result['token']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {result['error']}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    create_admin_user()
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n2Ô∏è‚É£ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    migrate_users_from_supabase()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\n3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    list_users()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    print("\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è...")
    create_test_invite()
    
    print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
