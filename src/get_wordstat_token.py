#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç
"""

import webbrowser
import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__))))

from wordstat_config import config

def get_oauth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    
    print("üîê –ü–æ–ª—É—á–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è API –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç")
    print("=" * 60)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = config.get_auth_url()
    print(f"1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print(f"   {auth_url}")
    print()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try:
        webbrowser.open(auth_url)
        print("üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    except Exception:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    print("2Ô∏è‚É£ –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–¥–æ–º")
    print("3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ URL (–ø–∞—Ä–∞–º–µ—Ç—Ä 'code') –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∏–∂–µ")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    auth_code = input("üìã –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
    
    if not auth_code:
        print("‚ùå –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return None
    
    # –®–∞–≥ 2: –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
    print("\nüîÑ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω...")
    
    token_url = "https://oauth.yandex.ru/token"
    token_data = {
        'grant_type': 'authorization_code',
        'code': auth_code,
        'client_id': config.client_id,
        'client_secret': config.client_secret
    }
    
    try:
        response = requests.post(token_url, data=token_data, timeout=30)
        response.raise_for_status()
        
        token_info = response.json()
        access_token = token_info.get('access_token')
        expires_in = token_info.get('expires_in', 3600)
        
        if not access_token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return None
        
        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
        print(f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_in} —Å–µ–∫—É–Ω–¥")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
        token_file = os.path.join(os.path.dirname(__file__), 'wordstat_token.json')
        with open(token_file, 'w', encoding='utf-8') as f:
            json.dump({
                'access_token': access_token,
                'expires_in': expires_in,
                'created_at': time.time()
            }, f, indent=2)
        
        print(f"üíæ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {token_file}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("\nüîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print(f"export YANDEX_WORDSTAT_OAUTH_TOKEN={access_token}")
        
        return access_token
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def test_token(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        from wordstat_client import WordstatClient
        
        client = WordstatClient(config.client_id, config.client_secret)
        client.set_access_token(token)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_data = client.get_popular_queries(["—Å—Ç—Ä–∏–∂–∫–∞"], 225)
        
        if test_data:
            print("‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç –¥–ª—è BeautyBot")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    token_file = os.path.join(os.path.dirname(__file__), 'wordstat_token.json')
    if os.path.exists(token_file):
        try:
            with open(token_file, 'r', encoding='utf-8') as f:
                token_data = json.load(f)
            
            print(f"üìÅ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω (—Å–æ–∑–¥–∞–Ω: {token_data.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
            
            use_existing = input("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω? (y/n): ").lower().strip()
            if use_existing == 'y':
                token = token_data.get('access_token')
                if token and test_token(token):
                    print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    return token
                else:
                    print("‚ùå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    token = get_oauth_token()
    
    if token:
        if test_token(token):
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –Ø–Ω–¥–µ–∫—Å.–í–æ—Ä–¥—Å—Ç–∞—Ç")
        else:
            print("\nüí• –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
    
    return token

if __name__ == "__main__":
    import time
    main()
