#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π GigaChat
"""
import requests
import json
import sys

API_BASE = "http://localhost:8000"

def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        response = requests.get(f"{API_BASE}/api/gigachat/config")
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def set_model(model_name):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å"""
    try:
        response = requests.post(
            f"{API_BASE}/api/gigachat/config",
            json={"model": model_name},
            headers={"Content-Type": "application/json"}
        )
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None

def list_models():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    config = get_config()
    if not config:
        return
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ GigaChat:")
    print("-" * 50)
    
    for model in config["available_models"]:
        current = "‚úÖ" if model == config["current_config"]["model"] else "‚ö™"
        print(f"{current} {model}")
    
    print(f"\nüéØ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {config['current_config']['model']}")
    print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config['current_config']['temperature']}")
    print(f"üìù –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {config['current_config']['max_tokens']}")

def main():
    if len(sys.argv) < 2:
        print("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π GigaChat")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python manage_gigachat.py list                    - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        print("  python manage_gigachat.py set <model_name>        - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å")
        print("  python manage_gigachat.py status                   - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    command = sys.argv[1].lower()
    
    if command == "list":
        list_models()
    
    elif command == "set":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            return
        
        model_name = sys.argv[2]
        result = set_model(model_name)
        
        if result and result.get("success"):
            print(f"‚úÖ {result['message']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    elif command == "status":
        config = get_config()
        if config:
            print("üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat:")
            print(f"   –ú–æ–¥–µ–ª—å: {config['current_config']['model']}")
            print(f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {config['current_config']['temperature']}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {config['current_config']['max_tokens']}")
            print(f"   –¢–∞–π–º–∞—É—Ç: {config['current_config']['timeout']}—Å")
            print(f"   –ü–æ–ø—ã—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞: {config['current_config']['retry_attempts']}")
            
            model_info = config['model_info']
            print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model_info['description']}")
            print(f"   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'–î–∞' if model_info['supports_images'] else '–ù–µ—Ç'}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è: {', '.join(model_info['recommended_for'])}")
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

if __name__ == "__main__":
    main()
