#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å Look Me: –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí –ò–ò-–∞–Ω–∞–ª–∏–∑ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
"""
import sys
import os
import traceback
import sqlite3
import uuid
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_look_me_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Look Me"""
    print("=== –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Look Me ===")
    
    try:
        from parser import parse_yandex_card
        
        # URL Look Me
        test_url = "https://yandex.ru/maps/org/look_me/195175604971/?ll=30.353829%2C59.924713&z=17.21"
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {test_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        import signal
        
        def timeout_handler(signum, frame):
            raise TimeoutError("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(120)  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
        
        try:
            result = parse_yandex_card(test_url)
            signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result['error']}")
                if 'captcha' in result['error'].lower():
                    print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return False
            else:
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–æ–∫")
                print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                print(f"–ê–¥—Ä–µ—Å: {result.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"–¢–µ–ª–µ—Ñ–æ–Ω: {result.get('phone', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"–†–µ–π—Ç–∏–Ω–≥: {result.get('rating', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {result.get('reviews_count', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                return True
                
        except TimeoutError:
            signal.alarm(0)
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (2 –º–∏–Ω)")
            return False
        except Exception as e:
            signal.alarm(0)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        traceback.print_exc()
        return False

def test_ai_analysis_look_me():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–ª—è Look Me"""
    print("\n=== –¢–µ—Å—Ç –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ Look Me ===")
    
    try:
        from gigachat_analyzer import analyze_business_data
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Look Me (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ)
        test_data = {
            'title': 'Look Me',
            'address': '–ê–¥—Ä–µ—Å Look Me',
            'phone': '+7 (xxx) xxx-xx-xx',
            'rating': '4.5',
            'reviews_count': 100,
            'categories': ['–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', '–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è'],
            'hours': '–ü–Ω-–ü—Ç: 10:00‚Äì20:00',
            'description': '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã Look Me'
        }
        
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑...")
        result = analyze_business_data(test_data)
        
        print(f"‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
        
        if 'analysis' in result:
            print(f"üìä –ê–Ω–∞–ª–∏–∑: {result['analysis']}")
        
        if 'score' in result:
            print(f"‚≠ê SEO-–æ—Ü–µ–Ω–∫–∞: {result['score']}/100")
        
        if 'recommendations' in result:
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result['recommendations']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
        traceback.print_exc()
        return False

def test_full_workflow_look_me():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å Look Me"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Look Me ===")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        conn = sqlite3.connect("reports.db")
        cursor = conn.cursor()
        
        test_id = str(uuid.uuid4())
        test_url = "https://yandex.ru/maps/org/look_me/195175604971/?ll=30.353829%2C59.924713&z=17.21"
        test_user_id = "f2123626-71b1-4424-8b2a-0bc93ab8f2eb"  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute("DELETE FROM ParseQueue WHERE user_id = ?", (test_user_id,))
        cursor.execute("DELETE FROM Cards WHERE user_id = ?", (test_user_id,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        cursor.execute("""
            INSERT INTO ParseQueue (id, url, user_id, status)
            VALUES (?, ?, ?, 'pending')
        """, (test_id, test_url, test_user_id))
        
        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {test_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker
        from worker import process_queue
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        process_queue()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ ParseQueue
        cursor.execute("SELECT status FROM ParseQueue WHERE id = ?", (test_id,))
        queue_status = cursor.fetchone()
        
        if queue_status:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_status[0]}")
            
            if queue_status[0] == 'completed':
                print("üéâ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            elif queue_status[0] == 'error':
                print("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            elif queue_status[0] == 'captcha_required':
                print("üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞–ø—á–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {queue_status[0]}")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        cursor.execute("""
            SELECT id, title, seo_score, ai_analysis, recommendations 
            FROM Cards 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT 1
        """, (test_user_id,))
        
        card = cursor.fetchone()
        
        if card:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {card[1]}")
            print(f"üìä SEO-–æ—Ü–µ–Ω–∫–∞: {card[2]}")
            print(f"ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑: {'–ï—Å—Ç—å' if card[3] else '–ù–µ—Ç'}")
            print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {'–ï—Å—Ç—å' if card[4] else '–ù–µ—Ç'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ HTML –æ—Ç—á—ë—Ç
            cursor.execute("SELECT report_path FROM Cards WHERE id = ?", (card[0],))
            report_path = cursor.fetchone()
            
            if report_path and report_path[0]:
                print(f"üìÑ HTML –æ—Ç—á—ë—Ç: {report_path[0]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                if os.path.exists(report_path[0]):
                    print("‚úÖ –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏")
            else:
                print("‚ùå HTML –æ—Ç—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
            return True
        else:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å Look Me")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥
    parsing_ok = test_look_me_parsing()
    
    # –¢–µ—Å—Ç 2: –ò–ò-–∞–Ω–∞–ª–∏–∑
    analysis_ok = test_ai_analysis_look_me()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    workflow_ok = test_full_workflow_look_me()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–ü–∞—Ä—Å–∏–Ω–≥: {'‚úÖ OK' if parsing_ok else '‚ùå FAIL'}")
    print(f"–ò–ò-–∞–Ω–∞–ª–∏–∑: {'‚úÖ OK' if analysis_ok else '‚ùå FAIL'}")
    print(f"–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: {'‚úÖ OK' if workflow_ok else '‚ùå FAIL'}")
    
    if parsing_ok and analysis_ok and workflow_ok:
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –ò–ò-–∞–Ω–∞–ª–∏–∑ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main()
