#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–µ—Ä–æ–º
"""
import sys
import os
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ ===")
    
    try:
        from parser import parse_yandex_card
        print("‚úÖ parser.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ parser.py: {e}")
        traceback.print_exc()
        return False
    
    try:
        from gigachat_analyzer import analyze_business_data
        print("‚úÖ gigachat_analyzer.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ gigachat_analyzer.py: {e}")
        traceback.print_exc()
        return False
    
    try:
        from worker import process_queue
        print("‚úÖ worker.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ worker.py: {e}")
        traceback.print_exc()
        return False
    
    return True

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        import sqlite3
        conn = sqlite3.connect("reports.db")
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {[t[0] for t in tables]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å
        cursor.execute("SELECT COUNT(*) FROM ParseQueue")
        queue_count = cursor.fetchone()[0]
        print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        cursor.execute("SELECT status, COUNT(*) FROM ParseQueue GROUP BY status")
        statuses = cursor.fetchall()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å—ã –≤ –æ—á–µ—Ä–µ–¥–∏: {dict(statuses)}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        traceback.print_exc()
        return False

def test_parser_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ ===")
    
    try:
        from parser import parse_yandex_card
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL
        test_url = "https://yandex.ru/maps/org/gagarin/180566191872/?ll=30.338344%2C59.858729&z=16.88"
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {test_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        import signal
        
        def timeout_handler(signum, frame):
            raise TimeoutError("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(60)  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        try:
            result = parse_yandex_card(test_url)
            signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result['error']}")
                return False
            else:
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–æ–∫")
                return True
                
        except TimeoutError:
            signal.alarm(0)
            print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (60 —Å–µ–∫)")
            return False
        except Exception as e:
            signal.alarm(0)
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        traceback.print_exc()
        return False

def test_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ ===")
    
    try:
        from gigachat_analyzer import analyze_business_data
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'title': '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
            'address': '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
            'phone': '+7 (999) 123-45-67',
            'rating': '4.5',
            'reviews_count': 10
        }
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        result = analyze_business_data(test_data)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–∏: {list(result.keys())}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not test_database():
        print("\n‚ùå –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç)
    if not test_analyzer():
        print("\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)
    print("\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥...")
    user_input = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞? (y/n): ")
    if user_input.lower() == 'y':
        test_parser_simple()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
