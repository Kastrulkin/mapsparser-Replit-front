#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫ –±–∏–∑–Ω–µ—Å–∞–º
"""
import sqlite3
import sys
import os
import uuid
from datetime import datetime

def migrate_to_business_architecture():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å business_id"""
    conn = sqlite3.connect("src/reports.db")
    cursor = conn.cursor()
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å business_id...")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º business_id –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üìù –î–æ–±–∞–≤–ª—è–µ–º business_id –≤ —Ç–∞–±–ª–∏—Ü—ã...")
        
        tables_to_migrate = [
            "Cards",
            "FinancialTransactions", 
            "FinancialMetrics",
            "ScreenshotAnalyses"
        ]
        
        for table in tables_to_migrate:
            try:
                cursor.execute(f"ALTER TABLE {table} ADD COLUMN business_id TEXT;")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ business_id –≤ {table}")
            except sqlite3.OperationalError as e:
                if "duplicate column name" in str(e):
                    print(f"‚úÖ –ü–æ–ª–µ business_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ {table}")
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {table}: {e}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Services –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Services...")
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS Services (
                id TEXT PRIMARY KEY,
                business_id TEXT NOT NULL,
                name TEXT NOT NULL,
                description TEXT,
                category TEXT,
                keywords TEXT,
                price TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (business_id) REFERENCES Businesses (id) ON DELETE CASCADE
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ Services —Å–æ–∑–¥–∞–Ω–∞")
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìù –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_businesses_owner_id ON Businesses(owner_id)",
            "CREATE INDEX IF NOT EXISTS idx_services_business_id ON Services(business_id)",
            "CREATE INDEX IF NOT EXISTS idx_transactions_business_id ON FinancialTransactions(business_id)",
            "CREATE INDEX IF NOT EXISTS idx_metrics_business_id ON FinancialMetrics(business_id)",
            "CREATE INDEX IF NOT EXISTS idx_cards_business_id ON Cards(business_id)",
            "CREATE INDEX IF NOT EXISTS idx_screenshots_business_id ON ScreenshotAnalyses(business_id)"
        ]
        
        for index_sql in indexes:
            try:
                cursor.execute(index_sql)
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            except sqlite3.OperationalError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        # 4. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫ –±–∏–∑–Ω–µ—Å–∞–º
        print("üìù –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫ –±–∏–∑–Ω–µ—Å–∞–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –±–∏–∑–Ω–µ—Å—ã
        cursor.execute("SELECT id, email FROM Users")
        users = cursor.fetchall()
        
        for user_id, user_email in users:
            # –ù–∞—Ö–æ–¥–∏–º –±–∏–∑–Ω–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT id FROM Businesses WHERE owner_id = ?", (user_id,))
            user_businesses = cursor.fetchall()
            
            if user_businesses:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                business_id = user_businesses[0][0]
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Cards
                cursor.execute("""
                    UPDATE Cards 
                    SET business_id = ? 
                    WHERE user_id = ? AND business_id IS NULL
                """, (business_id, user_id))
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º FinancialTransactions
                cursor.execute("""
                    UPDATE FinancialTransactions 
                    SET business_id = ? 
                    WHERE user_id = ? AND business_id IS NULL
                """, (business_id, user_id))
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º FinancialMetrics
                cursor.execute("""
                    UPDATE FinancialMetrics 
                    SET business_id = ? 
                    WHERE user_id = ? AND business_id IS NULL
                """, (business_id, user_id))
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ScreenshotAnalyses
                cursor.execute("""
                    UPDATE ScreenshotAnalyses 
                    SET business_id = ? 
                    WHERE user_id = ? AND business_id IS NULL
                """, (business_id, user_id))
                
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–∏–∑–Ω–µ—Å—É {business_id}")
            else:
                print(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤")
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
        print("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏...")
        cursor.execute("SELECT id, name, business_type FROM Businesses")
        businesses = cursor.fetchall()
        
        for business_id, business_name, business_type in businesses:
            # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
            if business_type == 'beauty_salon':
                services = [
                    ("–ñ–µ–Ω—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å –ª—é–±–æ–π –¥–ª–∏–Ω—ã —Å —É–∫–ª–∞–¥–∫–æ–π", "haircut", "—Å—Ç—Ä–∏–∂–∫–∞, –≤–æ–ª–æ—Å—ã, —É–∫–ª–∞–¥–∫–∞", "2500"),
                    ("–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å –≤ –ª—é–±–æ–π —Ü–≤–µ—Ç", "coloring", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, —Ü–≤–µ—Ç, –≤–æ–ª–æ—Å—ã", "3500"),
                    ("–ú–∞–Ω–∏–∫—é—Ä", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä", "manicure", "–º–∞–Ω–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏, –ø–æ–∫—Ä—ã—Ç–∏–µ", "1500")
                ]
            elif business_type == 'barbershop':
                services = [
                    ("–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "haircut", "—Å—Ç—Ä–∏–∂–∫–∞, –º—É–∂—Å–∫–∞—è, –∫–ª–∞—Å—Å–∏–∫–∞", "1200"),
                    ("–ë—Ä–∏—Ç—å–µ", "–ë—Ä–∏—Ç—å–µ –æ–ø–∞—Å–Ω–æ–π –±—Ä–∏—Ç–≤–æ–π", "shaving", "–±—Ä–∏—Ç—å–µ, –æ–ø–∞—Å–Ω–∞—è –±—Ä–∏—Ç–≤–∞", "800"),
                    ("–£–∫–ª–∞–¥–∫–∞", "–£–∫–ª–∞–¥–∫–∞ –≤–æ–ª–æ—Å —Å —É–∫–ª–∞–¥–∫–æ–π", "styling", "—É–∫–ª–∞–¥–∫–∞, –≤–æ–ª–æ—Å—ã, —Å—Ç–∏–ª—å", "600")
                ]
            elif business_type == 'nail_studio':
                services = [
                    ("–ú–∞–Ω–∏–∫—é—Ä", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä", "manicure", "–º–∞–Ω–∏–∫—é—Ä, –Ω–æ–≥—Ç–∏", "1000"),
                    ("–ü–µ–¥–∏–∫—é—Ä", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä", "pedicure", "–ø–µ–¥–∏–∫—é—Ä, –Ω–æ–≥–∏, –Ω–æ–≥—Ç–∏", "1500"),
                    ("–ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫", "–ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º", "gel_polish", "–≥–µ–ª—å-–ª–∞–∫, –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω–æ–≥—Ç–∏", "800")
                ]
            else:
                services = [
                    ("–£—Å–ª—É–≥–∞ 1", "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 1", "general", "—É—Å–ª—É–≥–∞, –æ–ø–∏—Å–∞–Ω–∏–µ", "1000"),
                    ("–£—Å–ª—É–≥–∞ 2", "–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ 2", "general", "—É—Å–ª—É–≥–∞, –æ–ø–∏—Å–∞–Ω–∏–µ", "1500")
                ]
            
            for name, description, category, keywords, price in services:
                service_id = str(uuid.uuid4())
                cursor.execute("""
                    INSERT OR IGNORE INTO Services 
                    (id, business_id, name, description, category, keywords, price)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (service_id, business_id, name, description, category, keywords, price))
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(services)} —É—Å–ª—É–≥ –¥–ª—è {business_name}")
        
        conn.commit()
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å business_id...")
    success = migrate_to_business_architecture()
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìä –¢–µ–ø–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –±–∏–∑–Ω–µ—Å–∞–º")
        print("üîê –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–∏–∑–Ω–µ—Å—ã")
        print("üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        sys.exit(1)
