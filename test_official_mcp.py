#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Hugging Face MCP –∫–ª–∏–µ–Ω—Ç–∞
"""

import os
import subprocess
import json
import sys
from dotenv import load_dotenv

load_dotenv()

def test_mcp_client():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç"""
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    if not hf_token:
        print("‚ùå HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Hugging Face MCP –∫–ª–∏–µ–Ω—Ç")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å @huggingface/mcp-client...")
        result = subprocess.run(
            ["npx", "-y", "@huggingface/mcp-client", "--help"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ MCP –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
            print(f"üìÑ –ü–æ–º–æ—â—å: {result.stdout[:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ MCP –∫–ª–∏–µ–Ω—Ç–∞")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ MCP
    try:
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ MCP...")
        
        # –°–æ–∑–¥–∞–µ–º MCP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
        mcp_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/call",
            "params": {
                "name": "search_models",
                "arguments": {
                    "query": "russian text generation",
                    "limit": 5
                }
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ npx
        process = subprocess.Popen(
            ["npx", "-y", "@huggingface/mcp-client"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env={"HUGGINGFACE_API_TOKEN": hf_token}
        )
        
        try:
            stdout, stderr = process.communicate(
                input=json.dumps(mcp_request) + "\n",
                timeout=30
            )
            
            if process.returncode == 0:
                print("‚úÖ MCP –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                print(f"üìÑ –û—Ç–≤–µ—Ç: {stdout[:500]}...")
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                try:
                    response = json.loads(stdout)
                    if "result" in response:
                        models = response["result"].get("content", [])
                        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
                        for i, model in enumerate(models[:3], 1):
                            print(f"  {i}. {model.get('id', 'N/A')}")
                    else:
                        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                        
                except json.JSONDecodeError:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
                    
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ MCP: {stderr}")
                
        except subprocess.TimeoutExpired:
            process.kill()
            print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ MCP –∑–∞–ø—Ä–æ—Å–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ MCP: {e}")
        return False
    
    return True

def test_mcp_tools():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MCP"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã MCP...")
    
    try:
        # –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/list",
            "params": {}
        }
        
        process = subprocess.Popen(
            ["npx", "-y", "@huggingface/mcp-client"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            env={"HUGGINGFACE_API_TOKEN": os.getenv('HUGGINGFACE_API_TOKEN')}
        )
        
        stdout, stderr = process.communicate(
            input=json.dumps(tools_request) + "\n",
            timeout=30
        )
        
        if process.returncode == 0:
            print("‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω!")
            print(f"üìÑ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {stdout[:300]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {stderr}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")

if __name__ == "__main__":
    success = test_mcp_client()
    test_mcp_tools()
    
    if success:
        print(f"\nüéâ MCP –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print(f"\nüí• MCP –∫–ª–∏–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.") 