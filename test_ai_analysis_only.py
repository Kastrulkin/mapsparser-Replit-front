#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ AI –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ Supabase
"""

import os
import sys
import requests
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append('src')

from model_config import get_model_config, get_prompt

load_dotenv()

def call_huggingface_analysis(text: str) -> dict:
    """–í—ã–∑—ã–≤–∞–µ—Ç Hugging Face –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        model_config = get_model_config()
        model_name = model_config["name"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
        if not hf_token:
            return {"error": "HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        headers = {
            "Authorization": f"Bearer {hf_token}",
            "Content-Type": "application/json"
        }
        
        prompt = get_prompt("seo_analysis", text)
        
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_length": model_config["max_length"],
                "temperature": model_config["temperature"],
                "do_sample": model_config["do_sample"],
                "top_p": model_config["top_p"]
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º repetition_penalty –µ—Å–ª–∏ –µ—Å—Ç—å
        if "repetition_penalty" in model_config:
            payload["parameters"]["repetition_penalty"] = model_config["repetition_penalty"]
        
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ {model_name}...")
        print(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {model_config['max_length']}")
        print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {model_config['temperature']}")
        
        response = requests.post(
            f"https://api-inference.huggingface.co/models/{model_name}",
            headers=headers,
            json=payload,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return {"error": f"API error {response.status_code}", "details": response.text}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Hugging Face: {e}")
        return {"error": str(e)}

def test_ai_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∞–Ω–∞–ª–∏–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–∏–∑–Ω–µ—Å–∞
    test_data = {
        "title": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ï–ª–µ–Ω–∞ —É –º–µ—Ç—Ä–æ –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã",
        "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15",
        "phone": "+7 (495) 123-45-67",
        "website": "https://salon-elena.ru",
        "description": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–∏–∂–∫–∏, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ, –º–∞–Ω–∏–∫—é—Ä",
        "services": [
            "–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è",
            "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å", 
            "–ú–∞–Ω–∏–∫—é—Ä",
            "–ü–µ–¥–∏–∫—é—Ä"
        ],
        "working_hours": "–ü–Ω-–ü—Ç 9:00-20:00, –°–±-–í—Å 10:00-18:00",
        "rating": 4.2,
        "reviews_count": 15,
        "photos_count": 8,
        "categories": ["–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã"]
    }
    
    print(f"\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {test_data['title']}")
    print(f"–ê–¥—Ä–µ—Å: {test_data['address']}")
    print(f"–£—Å–ª—É–≥–∏: {', '.join(test_data['services'])}")
    print(f"–†–µ–π—Ç–∏–Ω–≥: {test_data['rating']}/5 ({test_data['reviews_count']} –æ—Ç–∑—ã–≤–æ–≤)")
    print(f"–§–æ—Ç–æ: {test_data['photos_count']} —à—Ç.")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    text_for_analysis = f"""
    –ù–∞–∑–≤–∞–Ω–∏–µ: {test_data['title']}
    –ê–¥—Ä–µ—Å: {test_data['address']}
    –¢–µ–ª–µ—Ñ–æ–Ω: {test_data['phone']}
    –°–∞–π—Ç: {test_data['website']}
    –û–ø–∏—Å–∞–Ω–∏–µ: {test_data['description']}
    –£—Å–ª—É–≥–∏: {', '.join(test_data['services'])}
    –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {test_data['working_hours']}
    –†–µ–π—Ç–∏–Ω–≥: {test_data['rating']}/5 ({test_data['reviews_count']} –æ—Ç–∑—ã–≤–æ–≤)
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {test_data['photos_count']}
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(test_data['categories'])}
    """
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        print(f"\nü§ñ –í—ã–ø–æ–ª–Ω—è–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑...")
        result = call_huggingface_analysis(text_for_analysis)
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return False
        
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print("-" * 50)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        if isinstance(result, list) and len(result) > 0:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Hugging Face
            generated_text = result[0].get('generated_text', '')
            print(generated_text)
        elif isinstance(result, dict) and 'generated_text' in result:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            print(result['generated_text'])
        else:
            # –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:")
            print(result)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = test_ai_analysis()
    if success:
        print(f"\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! AI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –º–æ–¥–µ–ª—å—é.")
    else:
        print(f"\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.") 