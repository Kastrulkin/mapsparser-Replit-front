#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append('src')
load_dotenv()

def test_ai_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑"""
    try:
        from ai_analyzer import call_huggingface_analysis
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = """
        –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã "–ï–ª–µ–Ω–∞" —É –º–µ—Ç—Ä–æ –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã
        –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —É–ª. –õ–µ–Ω–∏–Ω–∞, 123
        –£—Å–ª—É–≥–∏: –°—Ç—Ä–∏–∂–∫–∞, –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä
        –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 9:00-20:00
        –û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–µ, –∫–∞—Ä—Ç—ã
        –§–æ—Ç–æ: 8 —à—Ç—É–∫
        –û—Ç–∑—ã–≤—ã: 15 –æ—Ç–∑—ã–≤–æ–≤, —Ä–µ–π—Ç–∏–Ω–≥ 4.2
        """
        
        print("üîç –¢–µ—Å—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
        print("=" * 50)
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n{test_data}")
        print()
        
        # –í—ã–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑...")
        result = call_huggingface_analysis(test_data)
        
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print("=" * 30)
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return False
        else:
            print(f"‚úÖ –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_type', 'unknown')}")
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used', 'unknown')}")
            print()
            print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(result.get('generated_text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'))
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_supabase_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Supabase"""
    try:
        from save_to_supabase import save_analysis_result
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_analysis = {
            "business_name": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ï–ª–µ–Ω–∞",
            "analysis_text": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò",
            "model_used": "ainize/bart-base-cnn",
            "analysis_type": "ai_model"
        }
        
        print("\nüîç –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase")
        print("=" * 40)
        
        result = save_analysis_result(test_analysis)
        
        if result:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Supabase")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Supabase: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    ai_success = test_ai_analysis()
    
    # –¢–µ—Å—Ç Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ai_success:
        print("\n" + "="*60)
        print("üíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        supabase_success = test_supabase_integration()
    else:
        supabase_success = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if ai_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"üíæ Supabase: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if supabase_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if ai_success:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
        print("   1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥—å Supabase")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print("   3. –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
    else:
        print("\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    main() 