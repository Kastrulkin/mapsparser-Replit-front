#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ rubert-base-cased –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SEO
"""

import os
import requests
from dotenv import load_dotenv

load_dotenv()

def test_rubert_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å rubert-base-cased"""
    hf_token = os.getenv('HUGGINGFACE_API_TOKEN')
    if not hf_token:
        print("‚ùå HUGGINGFACE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    headers = {
        "Authorization": f"Bearer {hf_token}",
        "Content-Type": "application/json"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "title": "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ï–ª–µ–Ω–∞ —É –º–µ—Ç—Ä–æ –ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã",
        "address": "–ú–æ—Å–∫–≤–∞, —É–ª. –ö—É—Ç—É–∑–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 15",
        "services": ["–°—Ç—Ä–∏–∂–∫–∞ –∂–µ–Ω—Å–∫–∞—è", "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å", "–ú–∞–Ω–∏–∫—é—Ä"],
        "rating": 4.2,
        "reviews_count": 15,
        "photos_count": 8
    }
    
    text_for_analysis = f"""
    –ù–∞–∑–≤–∞–Ω–∏–µ: {test_data['title']}
    –ê–¥—Ä–µ—Å: {test_data['address']}
    –£—Å–ª—É–≥–∏: {', '.join(test_data['services'])}
    –†–µ–π—Ç–∏–Ω–≥: {test_data['rating']}/5 ({test_data['reviews_count']} –æ—Ç–∑—ã–≤–æ–≤)
    –§–æ—Ç–æ: {test_data['photos_count']} —à—Ç.
    """
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å rubert-base-cased")
    print("=" * 50)
    print(f"üìã –î–∞–Ω–Ω—ã–µ: {text_for_analysis}")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã —Å rubert
    approaches = [
        {
            "name": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            "payload": {
                "inputs": text_for_analysis,
                "parameters": {
                    "max_length": 512
                }
            }
        },
        {
            "name": "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", 
            "payload": {
                "inputs": f"–ê–Ω–∞–ª–∏–∑ SEO: {text_for_analysis}",
                "parameters": {
                    "max_length": 256
                }
            }
        }
    ]
    
    for approach in approaches:
        try:
            print(f"\nü§ñ {approach['name']}...")
            response = requests.post(
                "https://api-inference.huggingface.co/models/DeepPavlov/rubert-base-cased",
                headers=headers,
                json=approach['payload'],
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(f"üìÑ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(result)}")
                print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if isinstance(result, list):
                    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result)}")
                    for i, item in enumerate(result):
                        print(f"  –≠–ª–µ–º–µ–Ω—Ç {i}: {type(item)} - {item}")
                elif isinstance(result, dict):
                    print(f"üìä –ö–ª—é—á–∏: {list(result.keys())}")
                    for key, value in result.items():
                        print(f"  {key}: {value}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

if __name__ == "__main__":
    success = test_rubert_analysis()
    if success:
        print(f"\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª.") 